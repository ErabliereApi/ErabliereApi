//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace ErabliereAPI.Proxy
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IErabliereAPIProxy
    {
        /// <summary>
        /// Liste les alertes d'un capteur
        /// </summary>
        /// <param name="id">Identifiant du capteur</param>
        /// <param name="additionnalProperties">Propriétés additionnelles à ajouter à la réponse</param>
        /// <returns>Une liste d'alerte potentiellement vide.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AlerteCapteur>> AlerteCapteursAllAsync(System.Guid id, bool? additionnalProperties);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste les alertes d'un capteur
        /// </summary>
        /// <param name="id">Identifiant du capteur</param>
        /// <param name="additionnalProperties">Propriétés additionnelles à ajouter à la réponse</param>
        /// <returns>Une liste d'alerte potentiellement vide.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AlerteCapteur>> AlerteCapteursAllAsync(System.Guid id, bool? additionnalProperties, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Ajouter une Alerte
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">Les paramètres de l'alerte</param>
        /// <returns>L'alerte a été correctement ajouter.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlerteCapteursPOSTAsync(System.Guid id, AlerteCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ajouter une Alerte
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">Les paramètres de l'alerte</param>
        /// <returns>L'alerte a été correctement ajouter.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlerteCapteursPOSTAsync(System.Guid id, AlerteCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modifier une alerte
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">L'alerte a modifier</param>
        /// <returns>L'alerte a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlerteCapteursPUTAsync(System.Guid id, PutAlerteCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modifier une alerte
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">L'alerte a modifier</param>
        /// <returns>L'alerte a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlerteCapteursPUTAsync(System.Guid id, PutAlerteCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer une alerte
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="body">L'alerte à supprimer</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlerteCapteursDELETEAsync(System.Guid id, AlerteCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer une alerte
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="body">L'alerte à supprimer</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlerteCapteursDELETEAsync(System.Guid id, AlerteCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lister les alertes des capteurs d'une erablière
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="additionnalProperties">Propriétés additionnel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AlerteCapteur>> AlertesCapteurAsync(System.Guid id, bool? additionnalProperties);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lister les alertes des capteurs d'une erablière
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="additionnalProperties">Propriétés additionnel</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AlerteCapteur>> AlertesCapteurAsync(System.Guid id, bool? additionnalProperties, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Liste les Alertes
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="additionalProperties">Propriété additionnel, tel que les adresse couriels dans une liste</param>
        /// <returns>Une liste d'alerte potentiellement vide.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Alerte>> AlertesAllAsync(System.Guid id, bool? additionalProperties, string? select, string? filter, int? top, int? skip, string? expand, string? orderby);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste les Alertes
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="additionalProperties">Propriété additionnel, tel que les adresse couriels dans une liste</param>
        /// <returns>Une liste d'alerte potentiellement vide.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Alerte>> AlertesAllAsync(System.Guid id, bool? additionalProperties, string? select, string? filter, int? top, int? skip, string? expand, string? orderby, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Ajouter une Alerte
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">Les paramètres de l'alerte</param>
        /// <returns>L'alerte a été correctement ajouter.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlertesPOSTAsync(System.Guid id, Alerte? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ajouter une Alerte
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">Les paramètres de l'alerte</param>
        /// <returns>L'alerte a été correctement ajouter.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlertesPOSTAsync(System.Guid id, Alerte? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modifier une alerte
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">L'alerte a modifier</param>
        /// <returns>L'alerte a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlertesPUTAsync(System.Guid id, Alerte? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modifier une alerte
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">L'alerte a modifier</param>
        /// <returns>L'alerte a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlertesPUTAsync(System.Guid id, Alerte? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer une alerte
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="body">L'alerte à supprimer</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlertesDELETEAsync(System.Guid id, Alerte? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer une alerte
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="body">L'alerte à supprimer</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlertesDELETEAsync(System.Guid id, Alerte? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Liste les barils
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="dd">Utiliser ce paramètre pour obtenir les barils avec ne date plus grande ou égal au paramètre passé.</param>
        /// <param name="df">Utiliser ce paramètre pour obtenir les barils avec une date plus petite ou égal au paramètre passé.</param>
        /// <returns>Une liste de baril potentiellement vide.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Baril>> BarilAllAsync(System.Guid id, System.DateTimeOffset? dd, System.DateTimeOffset? df);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste les barils
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="dd">Utiliser ce paramètre pour obtenir les barils avec ne date plus grande ou égal au paramètre passé.</param>
        /// <param name="df">Utiliser ce paramètre pour obtenir les barils avec une date plus petite ou égal au paramètre passé.</param>
        /// <returns>Une liste de baril potentiellement vide.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Baril>> BarilAllAsync(System.Guid id, System.DateTimeOffset? dd, System.DateTimeOffset? df, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Ajouter un baril
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <returns>Le baril a été correctement ajouter.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BarilPOSTAsync(System.Guid id, Baril? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ajouter un baril
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <returns>Le baril a été correctement ajouter.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BarilPOSTAsync(System.Guid id, Baril? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modifier un baril
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">Le baril a modifier</param>
        /// <returns>Le baril a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BarilPUTAsync(System.Guid id, Baril? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modifier un baril
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">Le baril a modifier</param>
        /// <returns>Le baril a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BarilPUTAsync(System.Guid id, Baril? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer un baril
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="body">Le baril a supprimer</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BarilDELETEAsync(System.Guid id, Baril? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer un baril
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="body">Le baril a supprimer</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BarilDELETEAsync(System.Guid id, Baril? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Liste les capteurs
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="filtreNom">Permet de filtrer les capteurs recherché selon leur nom</param>
        /// <returns>Une liste de capteurs.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetCapteurs>> CapteursAllAsync(System.Guid id, string? filtreNom);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste les capteurs
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="filtreNom">Permet de filtrer les capteurs recherché selon leur nom</param>
        /// <returns>Une liste de capteurs.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetCapteurs>> CapteursAllAsync(System.Guid id, string? filtreNom, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Ajouter un capteur
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">Le capteur a ajouter</param>
        /// <returns>Le capteur a été correctement ajouté.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CapteursPOSTAsync(System.Guid id, PostCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ajouter un capteur
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">Le capteur a ajouter</param>
        /// <returns>Le capteur a été correctement ajouté.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CapteursPOSTAsync(System.Guid id, PostCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modifier un capteur
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">Le capteur a modifier</param>
        /// <returns>Le capteur a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CapteursPUTAsync(System.Guid id, PutCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modifier un capteur
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">Le capteur a modifier</param>
        /// <returns>Le capteur a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CapteursPUTAsync(System.Guid id, PutCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer un capteur
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="body">Le capteur a supprimer</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CapteursDELETEAsync(System.Guid id, DeleteCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer un capteur
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="body">Le capteur a supprimer</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CapteursDELETEAsync(System.Guid id, DeleteCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Obtenir un capteur
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="idCapteur">Id du capteur présent dans la route</param>
        /// <returns>Une liste de capteurs.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCapteurs> CapteursGETAsync(System.Guid id, System.Guid idCapteur);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Obtenir un capteur
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="idCapteur">Id du capteur présent dans la route</param>
        /// <returns>Une liste de capteurs.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCapteurs> CapteursGETAsync(System.Guid id, System.Guid idCapteur, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lister la documentation avec les fonctionnalité de OData
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Documentation>> DocumentationAllAsync(System.Guid id, string? select, string? filter, int? top, int? skip, string? expand, string? orderby);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lister la documentation avec les fonctionnalité de OData
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Documentation>> DocumentationAllAsync(System.Guid id, string? select, string? filter, int? top, int? skip, string? expand, string? orderby, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Action permettant d'ajouter une documentation
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Documentation> DocumentationAsync(System.Guid id, PostDocumentation? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Action permettant d'ajouter une documentation
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Documentation> DocumentationAsync(System.Guid id, PostDocumentation? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lister les dompeux
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="x_ddr">Date de la dernière données reçu. Permet au client d'optimiser le nombres de données reçu.</param>
        /// <param name="dd">La date de début</param>
        /// <param name="df">La date de fin</param>
        /// <param name="q">La quantité de donnée retourné</param>
        /// <param name="o">L'ordre des dompeux par date d'occurence. "c" = croissant, "d" = décoissant.</param>
        /// <returns>Une liste avec les dompeux. La liste est potentiellement vide.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetDompeux>> DompeuxAllAsync(System.Guid id, System.DateTimeOffset? x_ddr, System.DateTimeOffset? dd, System.DateTimeOffset? df, int? q, string? o);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lister les dompeux
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="x_ddr">Date de la dernière données reçu. Permet au client d'optimiser le nombres de données reçu.</param>
        /// <param name="dd">La date de début</param>
        /// <param name="df">La date de fin</param>
        /// <param name="q">La quantité de donnée retourné</param>
        /// <param name="o">L'ordre des dompeux par date d'occurence. "c" = croissant, "d" = décoissant.</param>
        /// <returns>Une liste avec les dompeux. La liste est potentiellement vide.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetDompeux>> DompeuxAllAsync(System.Guid id, System.DateTimeOffset? x_ddr, System.DateTimeOffset? dd, System.DateTimeOffset? df, int? q, string? o, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Ajouter un dompeux
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DompeuxPOSTAsync(System.Guid id, Dompeux? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ajouter un dompeux
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DompeuxPOSTAsync(System.Guid id, Dompeux? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Liste les DonneesCapteur
        /// </summary>
        /// <param name="id">Identifiant du capteur</param>
        /// <param name="x_ddr">Date de la dernière données reçu. Permet au client d'optimiser le nombres de données reçu.</param>
        /// <param name="dd">Date de début</param>
        /// <param name="df">Date de fin</param>
        /// <returns>Une liste de DonneesCapteur.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetDonneesCapteur>> DonneesCapteurAllAsync(System.Guid id, System.DateTimeOffset? x_ddr, System.DateTimeOffset? dd, System.DateTimeOffset? df);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste les DonneesCapteur
        /// </summary>
        /// <param name="id">Identifiant du capteur</param>
        /// <param name="x_ddr">Date de la dernière données reçu. Permet au client d'optimiser le nombres de données reçu.</param>
        /// <param name="dd">Date de début</param>
        /// <param name="df">Date de fin</param>
        /// <returns>Une liste de DonneesCapteur.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetDonneesCapteur>> DonneesCapteurAllAsync(System.Guid id, System.DateTimeOffset? x_ddr, System.DateTimeOffset? dd, System.DateTimeOffset? df, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Ajouter un capteur
        /// </summary>
        /// <param name="id">L'identifiant du capteurs</param>
        /// <param name="body">Le capteur a ajouter</param>
        /// <returns>Le capteur a été correctement ajouté.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesCapteurPOSTAsync(System.Guid id, PostDonneeCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ajouter un capteur
        /// </summary>
        /// <param name="id">L'identifiant du capteurs</param>
        /// <param name="body">Le capteur a ajouter</param>
        /// <returns>Le capteur a été correctement ajouté.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesCapteurPOSTAsync(System.Guid id, PostDonneeCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modifier un capteur
        /// </summary>
        /// <param name="id">L'identifiant du capteur</param>
        /// <param name="body">Le capteur a modifier</param>
        /// <returns>Le capteur a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesCapteurPUTAsync(System.Guid id, DonneeCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modifier un capteur
        /// </summary>
        /// <param name="id">L'identifiant du capteur</param>
        /// <param name="body">Le capteur a modifier</param>
        /// <returns>Le capteur a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesCapteurPUTAsync(System.Guid id, DonneeCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer un capteur
        /// </summary>
        /// <param name="id">Identifiant du capteur</param>
        /// <param name="body">Le capteur a supprimer</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesCapteurDELETEAsync(System.Guid id, DonneeCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer un capteur
        /// </summary>
        /// <param name="id">Identifiant du capteur</param>
        /// <param name="body">Le capteur a supprimer</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesCapteurDELETEAsync(System.Guid id, DonneeCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Liste les données de plusieurs capteurs DonneesCapteur
        /// </summary>
        /// <param name="ids">Identifiant des capteurs</param>
        /// <param name="x_ddr">Date de la dernière données reçu. Permet au client d'optimiser le nombres de données reçu.</param>
        /// <param name="dd">Date de début</param>
        /// <param name="df">Date de fin</param>
        /// <returns>Une liste Tupple avec l'id du catpeur et la liste des DonneesCapteur.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GuidGetDonneesCapteurIEnumerablePair>> GrapeAsync(string? ids, System.DateTimeOffset? x_ddr, System.DateTimeOffset? dd, System.DateTimeOffset? df);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste les données de plusieurs capteurs DonneesCapteur
        /// </summary>
        /// <param name="ids">Identifiant des capteurs</param>
        /// <param name="x_ddr">Date de la dernière données reçu. Permet au client d'optimiser le nombres de données reçu.</param>
        /// <param name="dd">Date de début</param>
        /// <param name="df">Date de fin</param>
        /// <returns>Une liste Tupple avec l'id du catpeur et la liste des DonneesCapteur.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GuidGetDonneesCapteurIEnumerablePair>> GrapeAsync(string? ids, System.DateTimeOffset? x_ddr, System.DateTimeOffset? dd, System.DateTimeOffset? df, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lister les données
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="x_ddr">Date de la dernière données reçu. Permet au client d'optimiser le nombres de données reçu.</param>
        /// <param name="dd">Date de début</param>
        /// <param name="df">Date de début</param>
        /// <param name="q">Quantité de donnée demander</param>
        /// <param name="o">Doit être croissant "c" ou decroissant "d". Par défaut "c"</param>
        /// <returns>Retourne une liste de données. La liste est potentiellement vide.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetDonnee> DonneesGETAsync(System.Guid id, System.DateTimeOffset? x_ddr, System.DateTimeOffset? dd, System.DateTimeOffset? df, int? q, string? o);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lister les données
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="x_ddr">Date de la dernière données reçu. Permet au client d'optimiser le nombres de données reçu.</param>
        /// <param name="dd">Date de début</param>
        /// <param name="df">Date de début</param>
        /// <param name="q">Quantité de donnée demander</param>
        /// <param name="o">Doit être croissant "c" ou decroissant "d". Par défaut "c"</param>
        /// <returns>Retourne une liste de données. La liste est potentiellement vide.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetDonnee> DonneesGETAsync(System.Guid id, System.DateTimeOffset? x_ddr, System.DateTimeOffset? dd, System.DateTimeOffset? df, int? q, string? o, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Ajouter un donnée.
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">La donnée à ajouter</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesPOSTAsync(System.Guid id, PostDonnee? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ajouter un donnée.
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">La donnée à ajouter</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesPOSTAsync(System.Guid id, PostDonnee? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Liste les érablières
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Erabliere>> ErablieresAllAsync(string? select, string? filter, int? top, int? skip, string? expand, string? orderby);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste les érablières
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Erabliere>> ErablieresAllAsync(string? select, string? filter, int? top, int? skip, string? expand, string? orderby, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Créer une érablière
        /// </summary>
        /// <param name="body">L'érablière à créer</param>
        /// <returns>L'érablière a été correctement ajouté</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ErablieresPOSTAsync(PostErabliere? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Créer une érablière
        /// </summary>
        /// <param name="body">L'érablière à créer</param>
        /// <returns>L'érablière a été correctement ajouté</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ErablieresPOSTAsync(PostErabliere? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Obtenir les données pour la page principale d'ErabliereIU
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetErabliereDashboard>> DashboardAsync(System.DateTimeOffset? dd, System.DateTimeOffset? df, System.DateTimeOffset? ddr, int? nbErabliere);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Obtenir les données pour la page principale d'ErabliereIU
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetErabliereDashboard>> DashboardAsync(System.DateTimeOffset? dd, System.DateTimeOffset? df, System.DateTimeOffset? ddr, int? nbErabliere, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lister les notes avec les fonctionnalité de OData
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Note>> NotesAllAsync(System.Guid id, string? select, string? filter, int? top, int? skip, string? expand, string? orderby);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lister les notes avec les fonctionnalité de OData
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Note>> NotesAllAsync(System.Guid id, string? select, string? filter, int? top, int? skip, string? expand, string? orderby, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Action permettant d'ajouter une note
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Note> NotesPOSTAsync(System.Guid id, PostNote? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Action permettant d'ajouter une note
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Note> NotesPOSTAsync(System.Guid id, PostNote? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Action permettant d'importer une liste de données
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ImporterAsync(System.Guid id, System.Collections.Generic.IEnumerable<Donnee>? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Action permettant d'importer une liste de données
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ImporterAsync(System.Guid id, System.Collections.Generic.IEnumerable<Donnee>? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Activer une alerte capteur
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="idAlerte">L'id de l'alerte</param>
        /// <param name="body">L'alerte a modifier</param>
        /// <returns>L'alerte a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ActiverAsync(System.Guid id, System.Guid idAlerte, PutAlerteCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Activer une alerte capteur
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="idAlerte">L'id de l'alerte</param>
        /// <param name="body">L'alerte a modifier</param>
        /// <returns>L'alerte a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ActiverAsync(System.Guid id, System.Guid idAlerte, PutAlerteCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Activer une alerte capteur
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="idAlerte">L'id de l'alerte</param>
        /// <param name="body">L'alerte a modifier</param>
        /// <returns>L'alerte a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DesactiverAsync(System.Guid id, System.Guid idAlerte, PutAlerteCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Activer une alerte capteur
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="idAlerte">L'id de l'alerte</param>
        /// <param name="body">L'alerte a modifier</param>
        /// <returns>L'alerte a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DesactiverAsync(System.Guid id, System.Guid idAlerte, PutAlerteCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Activer une alerte
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="idAlerte">L'id de l'alerte</param>
        /// <param name="body">L'id de l'alerte</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Activer2Async(System.Guid id, System.Guid idAlerte, Alerte? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Activer une alerte
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="idAlerte">L'id de l'alerte</param>
        /// <param name="body">L'id de l'alerte</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Activer2Async(System.Guid id, System.Guid idAlerte, Alerte? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Désactiver une alerte
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="idAlerte">L'id de l'alerte</param>
        /// <param name="body">L'id de l'alerte</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Desactiver2Async(System.Guid id, System.Guid idAlerte, Alerte? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Désactiver une alerte
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="idAlerte">L'id de l'alerte</param>
        /// <param name="body">L'id de l'alerte</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Desactiver2Async(System.Guid id, System.Guid idAlerte, Alerte? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modifier un dompeux
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="idDompeux">L'id du dompeux à modifier</param>
        /// <param name="body">Le dompeux à modifier</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DompeuxPUTAsync(System.Guid id, System.Guid idDompeux, Dompeux? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modifier un dompeux
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="idDompeux">L'id du dompeux à modifier</param>
        /// <param name="body">Le dompeux à modifier</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DompeuxPUTAsync(System.Guid id, System.Guid idDompeux, Dompeux? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer un dompeux
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="idDompeux">L'id du dompeux à supprimer</param>
        /// <param name="body">Le dompeux a supprimer</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DompeuxDELETEAsync(System.Guid id, System.Guid idDompeux, Dompeux? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer un dompeux
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="idDompeux">L'id du dompeux à supprimer</param>
        /// <param name="body">Le dompeux a supprimer</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DompeuxDELETEAsync(System.Guid id, System.Guid idDompeux, Dompeux? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modifier un dompeux
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="idDonnee">L'id de la donnée à modifier</param>
        /// <param name="body">Le dompeux à ajouter</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesPUTAsync(System.Guid id, System.Guid idDonnee, PutDonnee? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modifier un dompeux
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="idDonnee">L'id de la donnée à modifier</param>
        /// <param name="body">Le dompeux à ajouter</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesPUTAsync(System.Guid id, System.Guid idDonnee, PutDonnee? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer un dompeux
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="idDonnee">L'id de la donnée à supprimer</param>
        /// <param name="body">Le dompeux a supprimer</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesDELETEAsync(System.Guid id, System.Guid idDonnee, Donnee? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer un dompeux
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="idDonnee">L'id de la donnée à supprimer</param>
        /// <param name="body">Le dompeux a supprimer</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesDELETEAsync(System.Guid id, System.Guid idDonnee, Donnee? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modifier une érablière
        /// </summary>
        /// <param name="id">L'id de l'érablière à modifier</param>
        /// <param name="body">Le donnée de l'érablière à modifier.
        /// <br/>                1. L'id doit concorder avec celui de la route.
        /// <br/>                2. L'érablière doit exister.
        /// <br/>                3. Si le nom est modifier, il ne doit pas être pris par un autre érablière.
        /// <br/>            
        /// <br/>            Pour modifier l'adresse IP, vous devez entrer quelque chose. "-" pour supprimer les règles déjà existante.</param>
        /// <returns>L'érablière à été correctement modifié.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ErablieresPUTAsync(System.Guid id, PutErabliere? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modifier une érablière
        /// </summary>
        /// <param name="id">L'id de l'érablière à modifier</param>
        /// <param name="body">Le donnée de l'érablière à modifier.
        /// <br/>                1. L'id doit concorder avec celui de la route.
        /// <br/>                2. L'érablière doit exister.
        /// <br/>                3. Si le nom est modifier, il ne doit pas être pris par un autre érablière.
        /// <br/>            
        /// <br/>            Pour modifier l'adresse IP, vous devez entrer quelque chose. "-" pour supprimer les règles déjà existante.</param>
        /// <returns>L'érablière à été correctement modifié.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ErablieresPUTAsync(System.Guid id, PutErabliere? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer une érablière
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">L'érablière a supprimer</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ErablieresDELETEAsync(System.Guid id, GuidDeleteErabliere? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer une érablière
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">L'érablière a supprimer</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ErablieresDELETEAsync(System.Guid id, GuidDeleteErabliere? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Action permettant de modifier note
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="noteId">L'id de la note</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Note> NotesPUTAsync(System.Guid id, System.Guid noteId, PutNote? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Action permettant de modifier note
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="noteId">L'id de la note</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Note> NotesPUTAsync(System.Guid id, System.Guid noteId, PutNote? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Action permettant de supprimer une note
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="noteId">L'id de la note</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Note> NotesDELETEAsync(System.Guid id, System.Guid noteId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Action permettant de supprimer une note
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="noteId">L'id de la note</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Note> NotesDELETEAsync(System.Guid id, System.Guid noteId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer une alerte
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="idAlerte">L'id de l'alerte à supprimer</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlerteCapteursDELETE2Async(System.Guid id, System.Guid idAlerte);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer une alerte
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="idAlerte">L'id de l'alerte à supprimer</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlerteCapteursDELETE2Async(System.Guid id, System.Guid idAlerte, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer une alerte
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="idAlerte">L'id de l'alerte à supprimer</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlertesDELETE2Async(System.Guid id, System.Guid idAlerte);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer une alerte
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="idAlerte">L'id de l'alerte à supprimer</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlertesDELETE2Async(System.Guid id, System.Guid idAlerte, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Alerte
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("envoyerA")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? EnvoyerA { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("temperatureThresholdLow")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? TemperatureThresholdLow { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("temperatureThresholdHight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? TemperatureThresholdHight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vacciumThresholdLow")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? VacciumThresholdLow { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vacciumThresholdHight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? VacciumThresholdHight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("niveauBassinThresholdLow")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? NiveauBassinThresholdLow { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("niveauBassinThresholdHight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? NiveauBassinThresholdHight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isEnable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? IsEnable { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlerteCapteur
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idCapteur")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? IdCapteur { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("capteur")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public Capteur? Capteur { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("envoyerA")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? EnvoyerA { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? Dc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("minVaue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? MinVaue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maxValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? MaxValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isEnable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? IsEnable { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Baril
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("df")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? Df { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("erabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public Erabliere? Erabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("qe")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? Qe { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("q")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? Q { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Capteur
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? Dc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherCapteurDashboard")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? AfficherCapteurDashboard { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ajouterDonneeDepuisInterface")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? AjouterDonneeDepuisInterface { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("erabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public Erabliere? Erabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("donneesCapteur")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.Generic.ICollection<DonneeCapteur>? DonneesCapteur { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("alertesCapteur")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.Generic.ICollection<AlerteCapteur>? AlertesCapteur { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nom")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("symbole")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string? Symbole { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeleteCapteur
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? IdErabliere { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Documentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("erabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public Erabliere? Erabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("created")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? Created { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("text")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? Text { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileExtension")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? FileExtension { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("file")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public byte[]? File { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dompeux
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("t")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? T { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dd")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? Dd { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("df")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? Df { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("erabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public Erabliere? Erabliere { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Donnee
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("d")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? D { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("t")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? T { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nb")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? Nb { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("v")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? V { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("erabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public Erabliere? Erabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pi")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? Pi { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nboc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? Nboc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("iddp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Iddp { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DonneeCapteur
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valeur")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? Valeur { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("text")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Text { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("d")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? D { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idCapteur")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? IdCapteur { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("capteur")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public Capteur? Capteur { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Erabliere
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nom")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ipRule")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? IpRule { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indiceOrdre")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? IndiceOrdre { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherSectionBaril")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? AfficherSectionBaril { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherTrioDonnees")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? AfficherTrioDonnees { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherSectionDompeux")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? AfficherSectionDompeux { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? IsPublic { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("capteurs")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.Generic.ICollection<Capteur>? Capteurs { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("donnees")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.Generic.ICollection<Donnee>? Donnees { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barils")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.Generic.ICollection<Baril>? Barils { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dompeux")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.Generic.ICollection<Dompeux>? Dompeux { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.Generic.ICollection<Note>? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentations")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.Generic.ICollection<Documentation>? Documentations { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetBaril
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("df")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? Df { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("qe")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? Qe { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("q")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? Q { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetCapteurs
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nom")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("symbole")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Symbole { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherCapteurDashboard")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? AfficherCapteurDashboard { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ajouterDonneeDepuisInterface")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? AjouterDonneeDepuisInterface { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? Dc { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetCapteursAvecDonnees
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nom")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ajouterDonneeDepuisInterface")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? AjouterDonneeDepuisInterface { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? Dc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("donnees")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.Generic.ICollection<GetDonneesCapteur>? Donnees { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDompeux
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("t")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? T { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dd")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? Dd { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("df")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? Df { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDonnee
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("d")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? D { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("t")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? T { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nb")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? Nb { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("v")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? V { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pi")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? Pi { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nboc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? Nboc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("iddp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Iddp { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDonneesCapteur
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valeur")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? Valeur { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("text")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Text { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("d")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? D { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetErabliereDashboard
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nom")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ipRule")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? IpRule { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indiceOrdre")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? IndiceOrdre { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherSectionBaril")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? AfficherSectionBaril { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherTrioDonnees")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? AfficherTrioDonnees { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherSectionDompeux")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? AfficherSectionDompeux { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("capteurs")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.Generic.ICollection<GetCapteursAvecDonnees>? Capteurs { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("donnees")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.Generic.ICollection<GetDonnee>? Donnees { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barils")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.Generic.ICollection<GetBaril>? Barils { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dompeux")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.Generic.ICollection<GetDompeux>? Dompeux { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GuidDeleteErabliere
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GuidGetDonneesCapteurIEnumerablePair
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valeur")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Collections.Generic.ICollection<GetDonneesCapteur>? Valeur { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Note
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("erabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public Erabliere? Erabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("text")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? Text { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileExtension")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? FileExtension { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("file")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public byte[]? File { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("created")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? Created { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("noteDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? NoteDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostCapteur
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nom")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("symbole")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string? Symbole { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? Dc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherCapteurDashboard")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? AfficherCapteurDashboard { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ajouterDonneeDepuisInterface")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? AjouterDonneeDepuisInterface { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? IdErabliere { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostDocumentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("created")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? Created { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("text")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Text { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileExtension")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? FileExtension { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("file")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? File { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostDonnee
    {

        [System.Text.Json.Serialization.JsonPropertyName("d")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? D { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("t")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? T { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nb")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? Nb { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("v")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? V { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid IdErabliere { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostDonneeCapteur
    {

        [System.Text.Json.Serialization.JsonPropertyName("v")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? V { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("text")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Text { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("d")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? D { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idCapteur")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? IdCapteur { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostErabliere
    {

        [System.Text.Json.Serialization.JsonPropertyName("nom")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ipRules")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? IpRules { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indiceOrdre")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? IndiceOrdre { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherSectionBaril")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? AfficherSectionBaril { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherTrioDonnees")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? AfficherTrioDonnees { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherSectionDompeux")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? AfficherSectionDompeux { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostNote
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("text")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? Text { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("file")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? File { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileExtension")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? FileExtension { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("created")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? Created { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("noteDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? NoteDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutAlerteCapteur
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idCapteur")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? IdCapteur { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("envoyerA")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? EnvoyerA { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("minVaue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? MinVaue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maxValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? MaxValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isEnable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? IsEnable { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutCapteur
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nom")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public string? Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherCapteurDashboard")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? AfficherCapteurDashboard { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ajouterDonneeDepuisInterface")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? AjouterDonneeDepuisInterface { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.DateTimeOffset? Dc { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutDonnee
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("t")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? T { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nb")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? Nb { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("v")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? V { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? IdErabliere { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutErabliere
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nom")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ipRule")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? IpRule { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indiceOrdre")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public int? IndiceOrdre { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherSectionBaril")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? AfficherSectionBaril { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherTrioDonnees")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? AfficherTrioDonnees { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherSectionDompeux")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public bool? AfficherSectionDompeux { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutNote
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileExtension")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull)]   
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? FileExtension { get; set; } = default!;

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603