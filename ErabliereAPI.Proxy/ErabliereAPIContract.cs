//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace ErabliereAPI.Proxy
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IErabliereAPIProxy
    {
        /// <summary>
        /// Liste les alertes d'un capteur
        /// </summary>
        /// <remarks>
        /// Les valeurs numérique sont en dixième de leurs unitées respective.
        /// </remarks>
        /// <param name="id">Identifiant du capteur</param>
        /// <param name="additionnalProperties">Propriétés additionnelles à ajouter à la réponse</param>
        /// <returns>Une liste d'alerte potentiellement vide.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AlerteCapteur>> AlerteCapteursAllAsync(System.Guid id, bool? additionnalProperties);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste les alertes d'un capteur
        /// </summary>
        /// <remarks>
        /// Les valeurs numérique sont en dixième de leurs unitées respective.
        /// </remarks>
        /// <param name="id">Identifiant du capteur</param>
        /// <param name="additionnalProperties">Propriétés additionnelles à ajouter à la réponse</param>
        /// <returns>Une liste d'alerte potentiellement vide.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AlerteCapteur>> AlerteCapteursAllAsync(System.Guid id, bool? additionnalProperties, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Ajouter une Alerte.
        /// <br/>Séparer les adresse courriel par des ; pour saisir plusieurs adresses.
        /// </summary>
        /// <remarks>
        /// Chaque valeur numérique est en dixième. Donc pour représenter 1 degré celcius, il faut inscrire 10.
        /// </remarks>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">Les paramètres de l'alerte</param>
        /// <returns>L'alerte a été correctement ajouter.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlerteCapteursPOSTAsync(System.Guid id, AlerteCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ajouter une Alerte.
        /// <br/>Séparer les adresse courriel par des ; pour saisir plusieurs adresses.
        /// </summary>
        /// <remarks>
        /// Chaque valeur numérique est en dixième. Donc pour représenter 1 degré celcius, il faut inscrire 10.
        /// </remarks>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">Les paramètres de l'alerte</param>
        /// <returns>L'alerte a été correctement ajouter.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlerteCapteursPOSTAsync(System.Guid id, AlerteCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modifier une alerte
        /// </summary>
        /// <param name="id">L'identifiant du capteur</param>
        /// <param name="additionalProperties">Propriété additionnel, tel que les adresse couriels dans une liste</param>
        /// <param name="body">L'alerte a modifier</param>
        /// <returns>L'alerte a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlerteCapteursPUTAsync(System.Guid id, bool? additionalProperties, PutAlerteCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modifier une alerte
        /// </summary>
        /// <param name="id">L'identifiant du capteur</param>
        /// <param name="additionalProperties">Propriété additionnel, tel que les adresse couriels dans une liste</param>
        /// <param name="body">L'alerte a modifier</param>
        /// <returns>L'alerte a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlerteCapteursPUTAsync(System.Guid id, bool? additionalProperties, PutAlerteCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer une alerte
        /// </summary>
        /// <param name="id">Identifiant du capteur</param>
        /// <param name="body">L'alerte à supprimer</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlerteCapteursDELETEAsync(System.Guid id, AlerteCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer une alerte
        /// </summary>
        /// <param name="id">Identifiant du capteur</param>
        /// <param name="body">L'alerte à supprimer</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlerteCapteursDELETEAsync(System.Guid id, AlerteCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lister les alertes des capteurs d'une erablière
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="additionnalProperties">Propriétés additionnel</param>
        /// <param name="include">Inclure les propriétés de navigation</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AlerteCapteur>> AlertesCapteurAsync(System.Guid id, bool? additionnalProperties, string? include);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lister les alertes des capteurs d'une erablière
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="additionnalProperties">Propriétés additionnel</param>
        /// <param name="include">Inclure les propriétés de navigation</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AlerteCapteur>> AlertesCapteurAsync(System.Guid id, bool? additionnalProperties, string? include, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Liste les Alertes
        /// </summary>
        /// <remarks>
        /// Les valeurs numérique sont en dixième de leurs unitées respective.
        /// </remarks>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="additionalProperties">Propriété additionnel, tel que les adresse couriels dans une liste</param>
        /// <returns>Une liste d'alerte potentiellement vide.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Alerte>> AlertesAllAsync(System.Guid id, bool? additionalProperties, string? select, string? filter, int? top, int? skip, string? expand, string? orderby);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste les Alertes
        /// </summary>
        /// <remarks>
        /// Les valeurs numérique sont en dixième de leurs unitées respective.
        /// </remarks>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="additionalProperties">Propriété additionnel, tel que les adresse couriels dans une liste</param>
        /// <returns>Une liste d'alerte potentiellement vide.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Alerte>> AlertesAllAsync(System.Guid id, bool? additionalProperties, string? select, string? filter, int? top, int? skip, string? expand, string? orderby, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Ajouter une Alerte
        /// <br/>Séparer les adresse courriel par des ; pour saisir plusieurs adresses.
        /// </summary>
        /// <remarks>
        /// Chaque valeur numérique est en dixième. Donc pour représenter 1 degré celcius, il faut inscrire 10.
        /// </remarks>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">Les paramètres de l'alerte</param>
        /// <returns>L'alerte a été correctement ajouter.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlertesPOSTAsync(System.Guid id, Alerte? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ajouter une Alerte
        /// <br/>Séparer les adresse courriel par des ; pour saisir plusieurs adresses.
        /// </summary>
        /// <remarks>
        /// Chaque valeur numérique est en dixième. Donc pour représenter 1 degré celcius, il faut inscrire 10.
        /// </remarks>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">Les paramètres de l'alerte</param>
        /// <returns>L'alerte a été correctement ajouter.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlertesPOSTAsync(System.Guid id, Alerte? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modifier une alerte
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="additionalProperties">Propriété additionnel, tel que les adresse couriels dans une liste</param>
        /// <param name="body">L'alerte a modifier</param>
        /// <returns>L'alerte a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlertesPUTAsync(System.Guid id, bool? additionalProperties, Alerte? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modifier une alerte
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="additionalProperties">Propriété additionnel, tel que les adresse couriels dans une liste</param>
        /// <param name="body">L'alerte a modifier</param>
        /// <returns>L'alerte a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlertesPUTAsync(System.Guid id, bool? additionalProperties, Alerte? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer une alerte
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="body">L'alerte à supprimer</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlertesDELETEAsync(System.Guid id, Alerte? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer une alerte
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="body">L'alerte à supprimer</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlertesDELETEAsync(System.Guid id, Alerte? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Permet de lister les clés d'API.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApiKey>> ApiKeyAllAsync(string? select, string? filter, int? top, int? skip, string? expand, string? orderby);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Permet de lister les clés d'API.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApiKey>> ApiKeyAllAsync(string? select, string? filter, int? top, int? skip, string? expand, string? orderby, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Permet de créer une nouvelle clé d'API.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ApiKeyPOSTAsync(PostApiKey? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Permet de créer une nouvelle clé d'API.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ApiKeyPOSTAsync(PostApiKey? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Liste les barils
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="dd">Utiliser ce paramètre pour obtenir les barils avec ne date plus grande ou égal au paramètre passé.</param>
        /// <param name="df">Utiliser ce paramètre pour obtenir les barils avec une date plus petite ou égal au paramètre passé.</param>
        /// <returns>Une liste de baril potentiellement vide.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Baril>> BarilAllAsync(System.Guid id, System.DateTimeOffset? dd, System.DateTimeOffset? df);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste les barils
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="dd">Utiliser ce paramètre pour obtenir les barils avec ne date plus grande ou égal au paramètre passé.</param>
        /// <param name="df">Utiliser ce paramètre pour obtenir les barils avec une date plus petite ou égal au paramètre passé.</param>
        /// <returns>Une liste de baril potentiellement vide.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Baril>> BarilAllAsync(System.Guid id, System.DateTimeOffset? dd, System.DateTimeOffset? df, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Ajouter un baril
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <returns>Le baril a été correctement ajouter.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BarilPOSTAsync(System.Guid id, Baril? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ajouter un baril
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <returns>Le baril a été correctement ajouter.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BarilPOSTAsync(System.Guid id, Baril? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modifier un baril
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">Le baril a modifier</param>
        /// <returns>Le baril a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BarilPUTAsync(System.Guid id, Baril? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modifier un baril
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">Le baril a modifier</param>
        /// <returns>Le baril a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BarilPUTAsync(System.Guid id, Baril? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer un baril
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="body">Le baril a supprimer</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BarilDELETEAsync(System.Guid id, Baril? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer un baril
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="body">Le baril a supprimer</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BarilDELETEAsync(System.Guid id, Baril? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Liste les capteurs
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="filtreNom">Permet de filtrer les capteurs recherché selon leur nom</param>
        /// <returns>Une liste de capteurs.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetCapteur>> CapteursAllAsync(System.Guid id, string? filtreNom, string? select, string? filter, int? top, int? skip, string? expand, string? orderby);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste les capteurs
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="filtreNom">Permet de filtrer les capteurs recherché selon leur nom</param>
        /// <returns>Une liste de capteurs.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetCapteur>> CapteursAllAsync(System.Guid id, string? filtreNom, string? select, string? filter, int? top, int? skip, string? expand, string? orderby, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Ajouter un capteur
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">Le capteur a ajouter</param>
        /// <returns>Le capteur a été correctement ajouté.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CapteursPOSTAsync(System.Guid id, PostCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ajouter un capteur
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">Le capteur a ajouter</param>
        /// <returns>Le capteur a été correctement ajouté.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CapteursPOSTAsync(System.Guid id, PostCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modifier une liste de capteurs
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">La liste de capteurs à modifier</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CapteursPUTAsync(System.Guid id, System.Collections.Generic.IEnumerable<PutCapteur>? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modifier une liste de capteurs
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">La liste de capteurs à modifier</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CapteursPUTAsync(System.Guid id, System.Collections.Generic.IEnumerable<PutCapteur>? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Obtenir un capteur
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="idCapteur">Id du capteur présent dans la route</param>
        /// <returns>Une liste de capteurs.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCapteur> CapteursGETAsync(System.Guid id, System.Guid idCapteur);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Obtenir un capteur
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="idCapteur">Id du capteur présent dans la route</param>
        /// <returns>Une liste de capteurs.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCapteur> CapteursGETAsync(System.Guid id, System.Guid idCapteur, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modifier un capteur
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="idCapteur">L'identifiant du capteur à modifier</param>
        /// <param name="body">Le capteur à modifier</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CapteursPUT2Async(System.Guid id, System.Guid idCapteur, PutCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modifier un capteur
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="idCapteur">L'identifiant du capteur à modifier</param>
        /// <param name="body">Le capteur à modifier</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CapteursPUT2Async(System.Guid id, System.Guid idCapteur, PutCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer un capteur
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="idCapteur">L'id du capteur à supprimer</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CapteursDELETEAsync(System.Guid id, System.Guid idCapteur);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer un capteur
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="idCapteur">L'id du capteur à supprimer</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CapteursDELETEAsync(System.Guid id, System.Guid idCapteur, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lister les capteurs d'image
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="filtreNom">Le filre appliqué sur le nom du capteur</param>
        /// <returns>Les capteurs d'image ont correctement été récupérés.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetCapteurImage>> CapteurImageAllAsync(System.Guid id, string? filtreNom, string? select, string? filter, int? top, int? skip, string? expand, string? orderby);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lister les capteurs d'image
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="filtreNom">Le filre appliqué sur le nom du capteur</param>
        /// <returns>Les capteurs d'image ont correctement été récupérés.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetCapteurImage>> CapteurImageAllAsync(System.Guid id, string? filtreNom, string? select, string? filter, int? top, int? skip, string? expand, string? orderby, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Ajouter un capteur d'image
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">Le capteur a ajouter</param>
        /// <returns>Le capteur a été correctement ajouté.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CapteurImagePOSTAsync(System.Guid id, PostCapteurImage? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ajouter un capteur d'image
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">Le capteur a ajouter</param>
        /// <returns>Le capteur a été correctement ajouté.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CapteurImagePOSTAsync(System.Guid id, PostCapteurImage? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Permet de lister les utilisateurs en exposant un minimum d'information.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetCustomer>> CustomersAllAsync(string? select, string? filter, int? top, int? skip, string? orderby);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Permet de lister les utilisateurs en exposant un minimum d'information.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetCustomer>> CustomersAllAsync(string? select, string? filter, int? top, int? skip, string? orderby, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Point de terminaison pour l'administration des utilisateurs
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Customer>> CustomersAll2Async(string? select, string? filter, int? top, int? skip, string? expand, string? orderby);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Point de terminaison pour l'administration des utilisateurs
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Customer>> CustomersAll2Async(string? select, string? filter, int? top, int? skip, string? expand, string? orderby, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Point de terminaison d'administration pour 
        /// <br/>récupérer les accès d'un utilisateur
        /// </summary>
        /// <param name="id">Id de l'utilisateur</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomerAccess> AccessGETAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Point de terminaison d'administration pour 
        /// <br/>récupérer les accès d'un utilisateur
        /// </summary>
        /// <param name="id">Id de l'utilisateur</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomerAccess> AccessGETAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lister la documentation avec les fonctionnalité de OData
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Documentation>> DocumentationAllAsync(System.Guid id, string? select, string? filter, int? top, int? skip, string? expand, string? orderby);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lister la documentation avec les fonctionnalité de OData
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Documentation>> DocumentationAllAsync(System.Guid id, string? select, string? filter, int? top, int? skip, string? expand, string? orderby, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Action permettant d'ajouter une documentation
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Documentation> DocumentationPOSTAsync(System.Guid id, PostDocumentation? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Action permettant d'ajouter une documentation
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Documentation> DocumentationPOSTAsync(System.Guid id, PostDocumentation? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Récupère la quantité de documentation
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> QuantiteAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupère la quantité de documentation
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> QuantiteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Action permettant de télécharger le fichier relié à la documentation
        /// </summary>
        /// <param name="id">id de l'érablière</param>
        /// <param name="idDocumentation">id de la documentation</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> FichierAsync(System.Guid id, System.Guid idDocumentation);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Action permettant de télécharger le fichier relié à la documentation
        /// </summary>
        /// <param name="id">id de l'érablière</param>
        /// <param name="idDocumentation">id de la documentation</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> FichierAsync(System.Guid id, System.Guid idDocumentation, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lister les dompeux
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="x_ddr">Date de la dernière données reçu. Permet au client d'optimiser le nombres de données reçu.</param>
        /// <param name="dd">La date de début</param>
        /// <param name="df">La date de fin</param>
        /// <param name="q">La quantité de donnée retourné</param>
        /// <param name="o">L'ordre des dompeux par date d'occurence. "c" = croissant, "d" = décoissant.</param>
        /// <returns>Une liste avec les dompeux. La liste est potentiellement vide.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetDompeux>> DompeuxAllAsync(System.Guid id, System.DateTimeOffset? x_ddr, System.DateTimeOffset? dd, System.DateTimeOffset? df, int? q, string? o);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lister les dompeux
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="x_ddr">Date de la dernière données reçu. Permet au client d'optimiser le nombres de données reçu.</param>
        /// <param name="dd">La date de début</param>
        /// <param name="df">La date de fin</param>
        /// <param name="q">La quantité de donnée retourné</param>
        /// <param name="o">L'ordre des dompeux par date d'occurence. "c" = croissant, "d" = décoissant.</param>
        /// <returns>Une liste avec les dompeux. La liste est potentiellement vide.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetDompeux>> DompeuxAllAsync(System.Guid id, System.DateTimeOffset? x_ddr, System.DateTimeOffset? dd, System.DateTimeOffset? df, int? q, string? o, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Ajouter un dompeux
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DompeuxPOSTAsync(System.Guid id, Dompeux? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ajouter un dompeux
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DompeuxPOSTAsync(System.Guid id, Dompeux? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Liste les données d'un capteur
        /// </summary>
        /// <param name="id">Identifiant du capteur</param>
        /// <param name="x_ddr">Date de la dernière données reçu. Permet au client d'optimiser le nombres de données reçu.</param>
        /// <param name="dd">Date de début</param>
        /// <param name="df">Date de fin</param>
        /// <returns>Une liste de DonneesCapteur.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetDonneesCapteur>> DonneesCapteurAllAsync(System.Guid id, System.DateTimeOffset? x_ddr, System.DateTimeOffset? dd, System.DateTimeOffset? df);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste les données d'un capteur
        /// </summary>
        /// <param name="id">Identifiant du capteur</param>
        /// <param name="x_ddr">Date de la dernière données reçu. Permet au client d'optimiser le nombres de données reçu.</param>
        /// <param name="dd">Date de début</param>
        /// <param name="df">Date de fin</param>
        /// <returns>Une liste de DonneesCapteur.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetDonneesCapteur>> DonneesCapteurAllAsync(System.Guid id, System.DateTimeOffset? x_ddr, System.DateTimeOffset? dd, System.DateTimeOffset? df, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Ajouter une données d'un capteur
        /// </summary>
        /// <param name="id">L'identifiant du capteurs</param>
        /// <param name="body">Le capteur a ajouter</param>
        /// <returns>Le capteur a été correctement ajouté.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task DonneesCapteurPOSTAsync(System.Guid id, PostDonneeCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ajouter une données d'un capteur
        /// </summary>
        /// <param name="id">L'identifiant du capteurs</param>
        /// <param name="body">Le capteur a ajouter</param>
        /// <returns>Le capteur a été correctement ajouté.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task DonneesCapteurPOSTAsync(System.Guid id, PostDonneeCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modifier une données d'un capteur
        /// </summary>
        /// <param name="id">L'identifiant du capteur</param>
        /// <param name="body">Le capteur a modifier</param>
        /// <returns>Le capteur a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesCapteurPUTAsync(System.Guid id, DonneeCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modifier une données d'un capteur
        /// </summary>
        /// <param name="id">L'identifiant du capteur</param>
        /// <param name="body">Le capteur a modifier</param>
        /// <returns>Le capteur a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesCapteurPUTAsync(System.Guid id, DonneeCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer une données d'un capteur
        /// </summary>
        /// <param name="id">Identifiant du capteur</param>
        /// <param name="body">Le capteur a supprimer</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesCapteurDELETEAsync(System.Guid id, DonneeCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer une données d'un capteur
        /// </summary>
        /// <param name="id">Identifiant du capteur</param>
        /// <param name="body">Le capteur a supprimer</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesCapteurDELETEAsync(System.Guid id, DonneeCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Liste les données de plusieurs capteurs capteurs
        /// </summary>
        /// <param name="ids">Les identifiant des capteurs séparé par des ;</param>
        /// <param name="x_ddr">Date de la dernière données reçu. Permet au client d'optimiser le nombres de données reçu.</param>
        /// <param name="dd">Date de début</param>
        /// <param name="df">Date de fin</param>
        /// <returns>Une liste Tupple avec l'id du catpeur et la liste des DonneesCapteur.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GuidGetDonneesCapteurIEnumerablePair>> GrapeAsync(string? ids, System.DateTimeOffset? x_ddr, System.DateTimeOffset? dd, System.DateTimeOffset? df, string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste les données de plusieurs capteurs capteurs
        /// </summary>
        /// <param name="ids">Les identifiant des capteurs séparé par des ;</param>
        /// <param name="x_ddr">Date de la dernière données reçu. Permet au client d'optimiser le nombres de données reçu.</param>
        /// <param name="dd">Date de début</param>
        /// <param name="df">Date de fin</param>
        /// <returns>Une liste Tupple avec l'id du catpeur et la liste des DonneesCapteur.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GuidGetDonneesCapteurIEnumerablePair>> GrapeAsync(string? ids, System.DateTimeOffset? x_ddr, System.DateTimeOffset? dd, System.DateTimeOffset? df, string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Liste les données d'un capteur
        /// </summary>
        /// <param name="id">Identifiant du capteur</param>
        /// <param name="x_ddr">Date de la dernière données reçu. Permet au client d'optimiser le nombres de données reçu.</param>
        /// <param name="dd">Date de début</param>
        /// <param name="df">Date de fin</param>
        /// <param name="order">Ordre de tri</param>
        /// <param name="top">Nombre de données à retourner</param>
        /// <returns>Une liste de DonneesCapteur.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetDonneesCapteurV2>> DonneesCapteurV2AllAsync(System.Guid id, System.DateTimeOffset? x_ddr, System.DateTimeOffset? dd, System.DateTimeOffset? df, string? order, int? top);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste les données d'un capteur
        /// </summary>
        /// <param name="id">Identifiant du capteur</param>
        /// <param name="x_ddr">Date de la dernière données reçu. Permet au client d'optimiser le nombres de données reçu.</param>
        /// <param name="dd">Date de début</param>
        /// <param name="df">Date de fin</param>
        /// <param name="order">Ordre de tri</param>
        /// <param name="top">Nombre de données à retourner</param>
        /// <returns>Une liste de DonneesCapteur.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetDonneesCapteurV2>> DonneesCapteurV2AllAsync(System.Guid id, System.DateTimeOffset? x_ddr, System.DateTimeOffset? dd, System.DateTimeOffset? df, string? order, int? top, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Ajouter une données d'un capteur
        /// </summary>
        /// <param name="id">L'identifiant du capteurs</param>
        /// <param name="body">Le capteur a ajouter</param>
        /// <returns>Le capteur a été correctement ajouté.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesCapteurV2Async(System.Guid id, PostDonneeCapteurV2? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ajouter une données d'un capteur
        /// </summary>
        /// <param name="id">L'identifiant du capteurs</param>
        /// <param name="body">Le capteur a ajouter</param>
        /// <returns>Le capteur a été correctement ajouté.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesCapteurV2Async(System.Guid id, PostDonneeCapteurV2? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Liste les données de plusieurs capteurs capteurs
        /// </summary>
        /// <param name="ids">Les identifiant des capteurs séparé par des ;</param>
        /// <param name="x_ddr">Date de la dernière données reçu. Permet au client d'optimiser le nombres de données reçu.</param>
        /// <param name="dd">Date de début</param>
        /// <param name="df">Date de fin</param>
        /// <returns>Une liste Tupple avec l'id du catpeur et la liste des DonneesCapteur.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GuidGetDonneesCapteurV2IEnumerablePair>> Grape2Async(string? ids, System.DateTimeOffset? x_ddr, System.DateTimeOffset? dd, System.DateTimeOffset? df, string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste les données de plusieurs capteurs capteurs
        /// </summary>
        /// <param name="ids">Les identifiant des capteurs séparé par des ;</param>
        /// <param name="x_ddr">Date de la dernière données reçu. Permet au client d'optimiser le nombres de données reçu.</param>
        /// <param name="dd">Date de début</param>
        /// <param name="df">Date de fin</param>
        /// <returns>Une liste Tupple avec l'id du catpeur et la liste des DonneesCapteur.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GuidGetDonneesCapteurV2IEnumerablePair>> Grape2Async(string? ids, System.DateTimeOffset? x_ddr, System.DateTimeOffset? dd, System.DateTimeOffset? df, string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lister les données
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="x_ddr">Date de la dernière données reçu. Permet au client d'optimiser le nombres de données reçu.</param>
        /// <param name="dd">Date de début</param>
        /// <param name="df">Date de début</param>
        /// <param name="q">Quantité de donnée demander</param>
        /// <param name="o">Doit être croissant "c" ou decroissant "d". Par défaut "c"</param>
        /// <returns>Retourne une liste de données. La liste est potentiellement vide.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetDonnee>> DonneesAllAsync(System.Guid id, System.DateTimeOffset? x_ddr, System.DateTimeOffset? dd, System.DateTimeOffset? df, int? q, string? o);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lister les données
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="x_ddr">Date de la dernière données reçu. Permet au client d'optimiser le nombres de données reçu.</param>
        /// <param name="dd">Date de début</param>
        /// <param name="df">Date de début</param>
        /// <param name="q">Quantité de donnée demander</param>
        /// <param name="o">Doit être croissant "c" ou decroissant "d". Par défaut "c"</param>
        /// <returns>Retourne une liste de données. La liste est potentiellement vide.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetDonnee>> DonneesAllAsync(System.Guid id, System.DateTimeOffset? x_ddr, System.DateTimeOffset? dd, System.DateTimeOffset? df, int? q, string? o, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Ajouter un donnée.
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">La donnée à ajouter</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesPOSTAsync(System.Guid id, PostDonnee? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Ajouter un donnée.
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">La donnée à ajouter</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesPOSTAsync(System.Guid id, PostDonnee? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Liste les conversation
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Conversation>> ConversationsAllGETAsync(string? select, string? filter, int? top, int? skip, string? expand, string? orderby);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste les conversation
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Conversation>> ConversationsAllGETAsync(string? select, string? filter, int? top, int? skip, string? expand, string? orderby, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Liste les messages
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Message>> MessagesAsync(System.Guid id, string? select, string? filter, int? top, int? skip, string? expand, string? orderby);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste les messages
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Message>> MessagesAsync(System.Guid id, string? select, string? filter, int? top, int? skip, string? expand, string? orderby, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Message>> PublicAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Message>> PublicAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Liste les conversation en tant qu'administrteur
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Conversation>> ConversationsAllGET2Async(string? select, string? filter, int? top, int? skip, string? expand, string? orderby);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste les conversation en tant qu'administrteur
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Conversation>> ConversationsAllGET2Async(string? select, string? filter, int? top, int? skip, string? expand, string? orderby, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Liste les érablières
        /// </summary>
        /// <param name="orderbyQuery">Ordre de tri</param>
        /// <param name="filterQuery">Filtre</param>
        /// <param name="topQuery">Nombre d'érablière à retourner</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Erabliere>> ErablieresAllAsync(string? orderbyQuery, string? filterQuery, int? topQuery, string? select, int? skip, string? expand);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste les érablières
        /// </summary>
        /// <param name="orderbyQuery">Ordre de tri</param>
        /// <param name="filterQuery">Filtre</param>
        /// <param name="topQuery">Nombre d'érablière à retourner</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Erabliere>> ErablieresAllAsync(string? orderbyQuery, string? filterQuery, int? topQuery, string? select, int? skip, string? expand, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Créer une érablière
        /// </summary>
        /// <param name="body">L'érablière à créer</param>
        /// <returns>L'érablière a été correctement ajouté</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ErablieresPOSTAsync(PostErabliere? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Créer une érablière
        /// </summary>
        /// <param name="body">L'érablière à créer</param>
        /// <returns>L'érablière a été correctement ajouté</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ErablieresPOSTAsync(PostErabliere? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lister les érablières sous format GeoJson
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GeoJsonAsync(bool? isPublic, bool? my, string? capteur, int? topCapteur);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lister les érablières sous format GeoJson
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GeoJsonAsync(bool? isPublic, bool? my, string? capteur, int? topCapteur, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Obtenir les accès des utilisateurs à une érablière
        /// </summary>
        /// <returns>Les droits d'accès de l'érablère demandé</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomerAccess> AccessGET2Async(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Obtenir les accès des utilisateurs à une érablière
        /// </summary>
        /// <returns>Les droits d'accès de l'érablère demandé</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomerAccess> AccessGET2Async(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Point de terminaison pour l'administration des érablières
        /// </summary>
        /// <returns>Les érablières ont été correctement récupérées</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Erabliere>> ErablieresAll2Async(string? select, string? filter, int? top, int? skip, string? expand, string? orderby);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Point de terminaison pour l'administration des érablières
        /// </summary>
        /// <returns>Les érablières ont été correctement récupérées</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Erabliere>> ErablieresAll2Async(string? select, string? filter, int? top, int? skip, string? expand, string? orderby, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Obtenir les accès des utilisateurs à une érablière en tant qu'administrateur
        /// </summary>
        /// <returns>Les droits d'accès de l'érablère demandé</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetCustomerAccess>> AccessAllAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Obtenir les accès des utilisateurs à une érablière en tant qu'administrateur
        /// </summary>
        /// <returns>Les droits d'accès de l'érablère demandé</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetCustomerAccess>> AccessAllAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get access token for a map service
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetTunnelKeysAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get access token for a map service
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetTunnelKeysAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Liste les données d'un capteur
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="take">Nombre de données à prendre</param>
        /// <param name="skip">Nombre de données à sauter</param>
        /// <param name="search">Recherche</param>
        /// <returns>Une liste de DonneesCapteur.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetImageInfo>> ImagesCapteurAsync(System.Guid id, int? take, int? skip, string? search);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste les données d'un capteur
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="take">Nombre de données à prendre</param>
        /// <param name="skip">Nombre de données à sauter</param>
        /// <param name="search">Recherche</param>
        /// <returns>Une liste de DonneesCapteur.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetImageInfo>> ImagesCapteurAsync(System.Guid id, int? take, int? skip, string? search, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get access token for a map service
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetMapAccessToken> AccessTokenAsync(string provider);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get access token for a map service
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetMapAccessToken> AccessTokenAsync(string provider, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lister les notes avec les fonctionnalité de OData
        /// </summary>
        /// <param name="id">Id de l'érablière</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Note>> NotesAllAsync(System.Guid id, string? select, string? filter, int? top, int? skip, string? expand, string? orderby);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lister les notes avec les fonctionnalité de OData
        /// </summary>
        /// <param name="id">Id de l'érablière</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Note>> NotesAllAsync(System.Guid id, string? select, string? filter, int? top, int? skip, string? expand, string? orderby, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Action permettant d'ajouter une note
        /// </summary>
        /// <param name="id">Id de l'érablière</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Note> NotesPOSTAsync(System.Guid id, PostNote? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Action permettant d'ajouter une note
        /// </summary>
        /// <param name="id">Id de l'érablière</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Note> NotesPOSTAsync(System.Guid id, PostNote? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Récupère la quantité de notes
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> Quantite2Async(System.Guid id, string? search);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Récupère la quantité de notes
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> Quantite2Async(System.Guid id, string? search, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get toutes les notes avec un rappel actif et la périodicité est due
        /// </summary>
        /// <param name="id">Id de l'erabliere</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Note>> ActiveRappelsNotesAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get toutes les notes avec un rappel actif et la périodicité est due
        /// </summary>
        /// <param name="id">Id de l'erabliere</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Note>> ActiveRappelsNotesAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Obetenir l'image d'une note
        /// </summary>
        /// <param name="id">Id de l'érablière</param>
        /// <param name="noteId">Id de la note</param>
        /// <returns>Retourne l'image de la note</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ImageAsync(System.Guid id, System.Guid noteId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Obetenir l'image d'une note
        /// </summary>
        /// <param name="id">Id de l'érablière</param>
        /// <param name="noteId">Id de la note</param>
        /// <returns>Retourne l'image de la note</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ImageAsync(System.Guid id, System.Guid noteId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retourne la liste des rapports sauvegardés
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Rapport>> RapportsAllAsync(System.Guid id, string? select, string? filter, int? top, int? skip, string? expand, string? orderby);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retourne la liste des rapports sauvegardés
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Rapport>> RapportsAllAsync(System.Guid id, string? select, string? filter, int? top, int? skip, string? expand, string? orderby, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Retourne un rapport spécifique
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Rapport> RapportsGETAsync(System.Guid id, System.Guid idRapport);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retourne un rapport spécifique
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Rapport> RapportsGETAsync(System.Guid id, System.Guid idRapport, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer un rapport
        /// </summary>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RapportsDELETEAsync(System.Guid id, System.Guid idRapport);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer un rapport
        /// </summary>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RapportsDELETEAsync(System.Guid id, System.Guid idRapport, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Obtenir les prévisions météo pour une érablière
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="lang">Paramètre de langue, fr-ca par défaut.</param>
        /// <returns>Prévisions météo</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WeatherForecastResponse> WeatherForecastAsync(System.Guid id, string? lang);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Obtenir les prévisions météo pour une érablière
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="lang">Paramètre de langue, fr-ca par défaut.</param>
        /// <returns>Prévisions météo</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WeatherForecastResponse> WeatherForecastAsync(System.Guid id, string? lang, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Obtenir les prévisions météo pour les prochaines heures
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="lang">Paramètre de langue, fr-ca par défaut.</param>
        /// <returns>Prévisions météo</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HourlyWeatherForecastResponse>> HourlyAsync(System.Guid id, string? lang);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Obtenir les prévisions météo pour les prochaines heures
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="lang">Paramètre de langue, fr-ca par défaut.</param>
        /// <returns>Prévisions météo</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HourlyWeatherForecastResponse>> HourlyAsync(System.Guid id, string? lang, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Action pour ajouter une liste de capteurs à chaque erabliere d'un filtre
        /// </summary>
        /// <param name="nameLike">Permet de filtrer les érablières recherchées selon leur nom</param>
        /// <param name="dcNull">Permet de filtrer les érablières qui n'ont pas de date de création</param>
        /// <param name="body">La liste de capteurs à ajouter</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AjouterListeAsync(string? nameLike, bool? dcNull, System.Collections.Generic.IEnumerable<PostCapteur>? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Action pour ajouter une liste de capteurs à chaque erabliere d'un filtre
        /// </summary>
        /// <param name="nameLike">Permet de filtrer les érablières recherchées selon leur nom</param>
        /// <param name="dcNull">Permet de filtrer les érablières qui n'ont pas de date de création</param>
        /// <param name="body">La liste de capteurs à ajouter</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AjouterListeAsync(string? nameLike, bool? dcNull, System.Collections.Generic.IEnumerable<PostCapteur>? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a checkout session
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CheckoutAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a checkout session
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CheckoutAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Webhook utilisé pour recevoir des appels d'un fournisseur de paiement
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task WebhookAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Webhook utilisé pour recevoir des appels d'un fournisseur de paiement
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task WebhookAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Action permetant de créer plusieurs données capteurs
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostManyAsync(System.Guid id, System.Collections.Generic.IEnumerable<PostDonneeCapteurV2>? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Action permetant de créer plusieurs données capteurs
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostManyAsync(System.Guid id, System.Collections.Generic.IEnumerable<PostDonneeCapteurV2>? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Action permettant d'importer une liste de données
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ImporterAsync(System.Guid id, System.Collections.Generic.IEnumerable<Donnee>? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Action permettant d'importer une liste de données
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ImporterAsync(System.Guid id, System.Collections.Generic.IEnumerable<Donnee>? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Envoyer un prompt à l'IA
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PostPromptResponse> PromptAsync(PostPrompt? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Envoyer un prompt à l'IA
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PostPromptResponse> PromptAsync(PostPrompt? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Traduire un texte
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TraductionAsync(string? from, string? to, PostTraduction? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Traduire un texte
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TraductionAsync(string? from, string? to, PostTraduction? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Post a image generation request
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ImagesAsync(PostImagesGenerationModel? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Post a image generation request
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ImagesAsync(PostImagesGenerationModel? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Importer des érablières
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ImportAsync(System.Collections.Generic.IEnumerable<PostErabliere>? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Importer des érablières
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ImportAsync(System.Collections.Generic.IEnumerable<PostErabliere>? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Action permettant de creer les droits d'accès d'un utilisateur 
        /// <br/>à une érablière.
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="idCustomer">L'id du client</param>
        /// <param name="body">Les informations sur les droits d'accès</param>
        /// <returns>Les droits d'accès ont été correctement modifié.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AccessPOSTAsync(System.Guid id, System.Guid idCustomer, PostAccess? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Action permettant de creer les droits d'accès d'un utilisateur 
        /// <br/>à une érablière.
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="idCustomer">L'id du client</param>
        /// <param name="body">Les informations sur les droits d'accès</param>
        /// <returns>Les droits d'accès ont été correctement modifié.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AccessPOSTAsync(System.Guid id, System.Guid idCustomer, PostAccess? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Action permettant de creer les droits d'accès d'un utilisateur 
        /// <br/>à une érablière.
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="idCustomer">L'id du client</param>
        /// <param name="body">Les informations sur les droits d'accès</param>
        /// <returns>Les droits d'accès ont été correctement modifié.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AccessPUTAsync(System.Guid id, System.Guid idCustomer, PutAccess? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Action permettant de creer les droits d'accès d'un utilisateur 
        /// <br/>à une érablière.
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="idCustomer">L'id du client</param>
        /// <param name="body">Les informations sur les droits d'accès</param>
        /// <returns>Les droits d'accès ont été correctement modifié.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AccessPUTAsync(System.Guid id, System.Guid idCustomer, PutAccess? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer les droits d'accès d'un utilisateur à une érablière
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="idCustomer">L'id du client</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AccessDELETEAsync(System.Guid id, System.Guid idCustomer);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer les droits d'accès d'un utilisateur à une érablière
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="idCustomer">L'id du client</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AccessDELETEAsync(System.Guid id, System.Guid idCustomer, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Action permettant de creer les droits d'accès d'un utilisateur en tant qu'administrateur
        /// <br/>à une érablière.
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="idCustomer">L'id du client</param>
        /// <param name="body">Les informations sur les droits d'accès</param>
        /// <returns>Les droits d'accès ont été correctement modifié.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AccessPOST2Async(System.Guid id, System.Guid idCustomer, PostAccess? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Action permettant de creer les droits d'accès d'un utilisateur en tant qu'administrateur
        /// <br/>à une érablière.
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="idCustomer">L'id du client</param>
        /// <param name="body">Les informations sur les droits d'accès</param>
        /// <returns>Les droits d'accès ont été correctement modifié.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AccessPOST2Async(System.Guid id, System.Guid idCustomer, PostAccess? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Action permettant de creer les droits d'accès d'un utilisateur en tant qu'administrateur
        /// <br/>à une érablière.
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="idCustomer">L'id du client</param>
        /// <param name="body">Les informations sur les droits d'accès</param>
        /// <returns>Les droits d'accès ont été correctement modifié.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AccessPUT2Async(System.Guid id, System.Guid idCustomer, PutAccess? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Action permettant de creer les droits d'accès d'un utilisateur en tant qu'administrateur
        /// <br/>à une érablière.
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="idCustomer">L'id du client</param>
        /// <param name="body">Les informations sur les droits d'accès</param>
        /// <returns>Les droits d'accès ont été correctement modifié.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AccessPUT2Async(System.Guid id, System.Guid idCustomer, PutAccess? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer les droits d'accès d'un utilisateur à une érablière en tant qu'administrateur
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="idCustomer">L'id du client</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AccessDELETE2Async(System.Guid id, System.Guid idCustomer);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer les droits d'accès d'un utilisateur à une érablière en tant qu'administrateur
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="idCustomer">L'id du client</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AccessDELETE2Async(System.Guid id, System.Guid idCustomer, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Action permettant de créer une note en utilisant Content-Type: multipart/form-data
        /// </summary>
        /// <param name="id">Id de l'érablière</param>
        /// <param name="idNote">L'id de la note si le client désire l'initialiser</param>
        /// <param name="idErabliere">L'id de l'érablière</param>
        /// <param name="title">Le titre de la note</param>
        /// <param name="text">Le text de la note</param>
        /// <param name="file">Fichier obtenu depuis le multipart</param>
        /// <param name="fileExtension">L'extension du fichier</param>
        /// <param name="created">La date de cération</param>
        /// <param name="noteDate">La date de la note</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PostNoteMultipartResponse> MultipartAsync(System.Guid id, System.Guid? idNote, System.Guid? idErabliere, string? title, string? text, FileParameter file, string? fileExtension, System.DateTimeOffset? created, System.DateTimeOffset? noteDate);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Action permettant de créer une note en utilisant Content-Type: multipart/form-data
        /// </summary>
        /// <param name="id">Id de l'érablière</param>
        /// <param name="idNote">L'id de la note si le client désire l'initialiser</param>
        /// <param name="idErabliere">L'id de l'érablière</param>
        /// <param name="title">Le titre de la note</param>
        /// <param name="text">Le text de la note</param>
        /// <param name="file">Fichier obtenu depuis le multipart</param>
        /// <param name="fileExtension">L'extension du fichier</param>
        /// <param name="created">La date de cération</param>
        /// <param name="noteDate">La date de la note</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PostNoteMultipartResponse> MultipartAsync(System.Guid id, System.Guid? idNote, System.Guid? idErabliere, string? title, string? text, FileParameter file, string? fileExtension, System.DateTimeOffset? created, System.DateTimeOffset? noteDate, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Effectue le rapport de degré jour pour une érablière
        /// <br/>en se basant soit sur l'id du capteur ou sur les données de température
        /// <br/>provenat du trio de données.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Rapport> RapportDegreeJourAsync(System.Guid id, bool? sauvegarder, PostRapportDegreeJourRequest? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Effectue le rapport de degré jour pour une érablière
        /// <br/>en se basant soit sur l'id du capteur ou sur les données de température
        /// <br/>provenat du trio de données.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Rapport> RapportDegreeJourAsync(System.Guid id, bool? sauvegarder, PostRapportDegreeJourRequest? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Activer une alerte capteur
        /// </summary>
        /// <param name="id">L'identifiant du capteur</param>
        /// <param name="idAlerte">L'id de l'alerte</param>
        /// <param name="body">L'alerte a modifier</param>
        /// <returns>L'alerte a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ActiverAsync(System.Guid id, System.Guid idAlerte, PutAlerteCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Activer une alerte capteur
        /// </summary>
        /// <param name="id">L'identifiant du capteur</param>
        /// <param name="idAlerte">L'id de l'alerte</param>
        /// <param name="body">L'alerte a modifier</param>
        /// <returns>L'alerte a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ActiverAsync(System.Guid id, System.Guid idAlerte, PutAlerteCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Activer une alerte capteur
        /// </summary>
        /// <param name="id">L'identifiant du capteur</param>
        /// <param name="idAlerte">L'id de l'alerte</param>
        /// <param name="body">L'alerte a modifier</param>
        /// <returns>L'alerte a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DesactiverAsync(System.Guid id, System.Guid idAlerte, PutAlerteCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Activer une alerte capteur
        /// </summary>
        /// <param name="id">L'identifiant du capteur</param>
        /// <param name="idAlerte">L'id de l'alerte</param>
        /// <param name="body">L'alerte a modifier</param>
        /// <returns>L'alerte a été correctement supprimé.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DesactiverAsync(System.Guid id, System.Guid idAlerte, PutAlerteCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Activer une alerte
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="idAlerte">L'id de l'alerte</param>
        /// <param name="body">L'id de l'alerte</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Activer2Async(System.Guid id, System.Guid idAlerte, Alerte? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Activer une alerte
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="idAlerte">L'id de l'alerte</param>
        /// <param name="body">L'id de l'alerte</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Activer2Async(System.Guid id, System.Guid idAlerte, Alerte? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Désactiver une alerte
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="idAlerte">L'id de l'alerte</param>
        /// <param name="body">L'id de l'alerte</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Desactiver2Async(System.Guid id, System.Guid idAlerte, Alerte? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Désactiver une alerte
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="idAlerte">L'id de l'alerte</param>
        /// <param name="body">L'id de l'alerte</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Desactiver2Async(System.Guid id, System.Guid idAlerte, Alerte? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Permet de modifier le nom d'une clé d'API.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task NameAsync(System.Guid id, PutApiKeyName? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Permet de modifier le nom d'une clé d'API.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task NameAsync(System.Guid id, PutApiKeyName? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Permet de révoquer une clé d'API.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RevokeAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Permet de révoquer une clé d'API.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RevokeAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modifier un capteur depuis son identifiant externe
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="externalId">L'identifiant du système externe du capteur</param>
        /// <param name="body">Le capteur à modifier</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ExternalIdAsync(System.Guid id, string externalId, PutCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modifier un capteur depuis son identifiant externe
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="externalId">L'identifiant du système externe du capteur</param>
        /// <param name="body">Le capteur à modifier</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ExternalIdAsync(System.Guid id, string externalId, PutCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Permet à un administrateur de modifier plusieurs capteurs depuis leurs nom
        /// </summary>
        /// <param name="filtreNom">Modifier les capteurs avec le nom suivant</param>
        /// <param name="body">Modification à apporter à chaque capteur</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ModifierDepuisFiltreAsync(string? filtreNom, PutCapteur? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Permet à un administrateur de modifier plusieurs capteurs depuis leurs nom
        /// </summary>
        /// <param name="filtreNom">Modifier les capteurs avec le nom suivant</param>
        /// <param name="body">Modification à apporter à chaque capteur</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ModifierDepuisFiltreAsync(string? filtreNom, PutCapteur? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modifier le style d'un capteur
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="idCapteur">L'identifiant du capteur à modifier</param>
        /// <param name="body">Le style à appliquer au capteur</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StyleAsync(System.Guid id, System.Guid idCapteur, PutCapteurStyle? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modifier le style d'un capteur
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="idCapteur">L'identifiant du capteur à modifier</param>
        /// <param name="body">Le style à appliquer au capteur</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StyleAsync(System.Guid id, System.Guid idCapteur, PutCapteurStyle? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modifier un capteur d'image
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="idCapteur">L'identifiant du capteur à modifier</param>
        /// <param name="body">Le capteur a ajouter</param>
        /// <returns>Le capteur a été correctement ajouté.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CapteurImagePUTAsync(System.Guid id, System.Guid idCapteur, PutCapteurImage? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modifier un capteur d'image
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="idCapteur">L'identifiant du capteur à modifier</param>
        /// <param name="body">Le capteur a ajouter</param>
        /// <returns>Le capteur a été correctement ajouté.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CapteurImagePUTAsync(System.Guid id, System.Guid idCapteur, PutCapteurImage? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer un capteur d'image
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="idCapteur">L'id du capteur d'image à supprimer</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CapteurImageDELETEAsync(System.Guid id, System.Guid idCapteur);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer un capteur d'image
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="idCapteur">L'id du capteur d'image à supprimer</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CapteurImageDELETEAsync(System.Guid id, System.Guid idCapteur, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Point de terminaison pour modifier un utilisateur
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomer> CustomersAsync(System.Guid id, PutCustomer? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Point de terminaison pour modifier un utilisateur
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomer> CustomersAsync(System.Guid id, PutCustomer? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Action permettant de modifier une documentation
        /// </summary>
        /// <param name="id">id de l'érablière</param>
        /// <param name="idDocumentation">id de la documentation</param>
        /// <param name="body">nouvelle informations sur la documentation</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Documentation> DocumentationPUTAsync(System.Guid id, System.Guid idDocumentation, PutDocumentation? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Action permettant de modifier une documentation
        /// </summary>
        /// <param name="id">id de l'érablière</param>
        /// <param name="idDocumentation">id de la documentation</param>
        /// <param name="body">nouvelle informations sur la documentation</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Documentation> DocumentationPUTAsync(System.Guid id, System.Guid idDocumentation, PutDocumentation? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Action permettant de supprimer un document
        /// </summary>
        /// <param name="id">id de l'érablière</param>
        /// <param name="idDocumentation">id du document</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DocumentationDELETEAsync(System.Guid id, System.Guid idDocumentation);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Action permettant de supprimer un document
        /// </summary>
        /// <param name="id">id de l'érablière</param>
        /// <param name="idDocumentation">id du document</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DocumentationDELETEAsync(System.Guid id, System.Guid idDocumentation, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modifier un dompeux
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="idDompeux">L'id du dompeux à modifier</param>
        /// <param name="body">Le dompeux à modifier</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DompeuxPUTAsync(System.Guid id, System.Guid idDompeux, Dompeux? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modifier un dompeux
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="idDompeux">L'id du dompeux à modifier</param>
        /// <param name="body">Le dompeux à modifier</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DompeuxPUTAsync(System.Guid id, System.Guid idDompeux, Dompeux? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer un dompeux
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="idDompeux">L'id du dompeux à supprimer</param>
        /// <param name="body">Le dompeux a supprimer</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DompeuxDELETEAsync(System.Guid id, System.Guid idDompeux, Dompeux? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer un dompeux
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="idDompeux">L'id du dompeux à supprimer</param>
        /// <param name="body">Le dompeux a supprimer</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DompeuxDELETEAsync(System.Guid id, System.Guid idDompeux, Dompeux? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modifier un dompeux
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="idDonnee">L'id de la donnée à modifier</param>
        /// <param name="body">Le dompeux à ajouter</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesPUTAsync(System.Guid id, System.Guid idDonnee, PutDonnee? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modifier un dompeux
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="idDonnee">L'id de la donnée à modifier</param>
        /// <param name="body">Le dompeux à ajouter</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesPUTAsync(System.Guid id, System.Guid idDonnee, PutDonnee? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer un dompeux
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="idDonnee">L'id de la donnée à supprimer</param>
        /// <param name="body">Le dompeux a supprimer</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesDELETEAsync(System.Guid id, System.Guid idDonnee, Donnee? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer un dompeux
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="idDonnee">L'id de la donnée à supprimer</param>
        /// <param name="body">Le dompeux a supprimer</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DonneesDELETEAsync(System.Guid id, System.Guid idDonnee, Donnee? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modifier une érablière
        /// </summary>
        /// <param name="id">L'id de l'érablière à modifier</param>
        /// <param name="body">Les données de l'érablière à modifier.
        /// <br/>                1. L'id doit concorder avec celui de la route.
        /// <br/>                2. L'érablière doit exister.
        /// <br/>                3. Si le nom est modifié, il ne doit pas être pris par une autre érablière.
        /// <br/>            
        /// <br/>            Pour modifier l'adresse IP, vous devez entrer quelque chose. "-" pour supprimer les règles déjà existante.</param>
        /// <returns>L'érablière a été correctement modifiée.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ErablieresPUTAsync(System.Guid id, PutErabliere? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modifier une érablière
        /// </summary>
        /// <param name="id">L'id de l'érablière à modifier</param>
        /// <param name="body">Les données de l'érablière à modifier.
        /// <br/>                1. L'id doit concorder avec celui de la route.
        /// <br/>                2. L'érablière doit exister.
        /// <br/>                3. Si le nom est modifié, il ne doit pas être pris par une autre érablière.
        /// <br/>            
        /// <br/>            Pour modifier l'adresse IP, vous devez entrer quelque chose. "-" pour supprimer les règles déjà existante.</param>
        /// <returns>L'érablière a été correctement modifiée.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ErablieresPUTAsync(System.Guid id, PutErabliere? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer une érablière
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">L'érablière a supprimer</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ErablieresDELETEAsync(System.Guid id, GuidDeleteErabliere? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer une érablière
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">L'érablière a supprimer</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ErablieresDELETEAsync(System.Guid id, GuidDeleteErabliere? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modifier une érablière en tant qu'administrateur
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">Les données de l'érablière à modifier.
        /// <br/>                1. L'id doit concorder avec celui de la route.
        /// <br/>                2. L'érablière doit exister.
        /// <br/>                3. Si le nom est modifié, il ne doit pas être pris par une autre érablière.</param>
        /// <returns>L'érablière a été correctement modifiée</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ErablieresPUT2Async(System.Guid id, PutAdminErabliere? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modifier une érablière en tant qu'administrateur
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <param name="body">Les données de l'érablière à modifier.
        /// <br/>                1. L'id doit concorder avec celui de la route.
        /// <br/>                2. L'érablière doit exister.
        /// <br/>                3. Si le nom est modifié, il ne doit pas être pris par une autre érablière.</param>
        /// <returns>L'érablière a été correctement modifiée</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ErablieresPUT2Async(System.Guid id, PutAdminErabliere? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer une érablière en tant qu'administrateur
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <returns>L'érablière a été correctement supprimée</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ErablieresDELETE2Async(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer une érablière en tant qu'administrateur
        /// </summary>
        /// <param name="id">L'identifiant de l'érablière</param>
        /// <returns>L'érablière a été correctement supprimée</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ErablieresDELETE2Async(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Enable a tunnel key
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task EnableAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable a tunnel key
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task EnableAsync(int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Enable a tunnel key
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DisableAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable a tunnel key
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DisableAsync(int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Action permettant de modifier note
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="noteId">L'id de la note</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Note> NotesPUTAsync(System.Guid id, System.Guid noteId, PutNote? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Action permettant de modifier note
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="noteId">L'id de la note</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Note> NotesPUTAsync(System.Guid id, System.Guid noteId, PutNote? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Action permettant de supprimer une note
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="noteId">L'id de la note</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Note> NotesDELETEAsync(System.Guid id, System.Guid noteId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Action permettant de supprimer une note
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <param name="noteId">L'id de la note</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Note> NotesDELETEAsync(System.Guid id, System.Guid noteId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Action permettant de mettre à jour les rappels des notes avec une périodicité due
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Note> PeriodiciteNotesAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Action permettant de mettre à jour les rappels des notes avec une périodicité due
        /// </summary>
        /// <param name="id">L'id de l'érablière</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Note> PeriodiciteNotesAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer une alerte
        /// </summary>
        /// <param name="id">Identifiant du capteur</param>
        /// <param name="idAlerte">L'id de l'alerte à supprimer</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlerteCapteursDELETE2Async(System.Guid id, System.Guid idAlerte);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer une alerte
        /// </summary>
        /// <param name="id">Identifiant du capteur</param>
        /// <param name="idAlerte">L'id de l'alerte à supprimer</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlerteCapteursDELETE2Async(System.Guid id, System.Guid idAlerte, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Supprimer une alerte
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="idAlerte">L'id de l'alerte à supprimer</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlertesDELETE2Async(System.Guid id, System.Guid idAlerte);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Supprimer une alerte
        /// </summary>
        /// <param name="id">Identifiant de l'érablière</param>
        /// <param name="idAlerte">L'id de l'alerte à supprimer</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AlertesDELETE2Async(System.Guid id, System.Guid idAlerte, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Permet de supprimer une clé d'API.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ApiKeyDELETEAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Permet de supprimer une clé d'API.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ApiKeyDELETEAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Point de terminaison pour la suppression d'un utilisateur
        /// </summary>
        /// <param name="id">Id de l'utilisateur</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CustomersAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Point de terminaison pour la suppression d'un utilisateur
        /// </summary>
        /// <param name="id">Id de l'utilisateur</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CustomersAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a conversation
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ConversationsAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a conversation
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ConversationsAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Liste les messages
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Message>> ConversationsAllPATCHAsync(System.Guid id, string? select, string? filter, int? top, int? skip, string? expand, string? orderby, PatchConversation? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Liste les messages
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Message>> ConversationsAllPATCHAsync(System.Guid id, string? select, string? filter, int? top, int? skip, string? expand, string? orderby, PatchConversation? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Permet à un administrateur de modifier le userId d'une conversation
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UserIdAsync(System.Guid id, PatchConversation? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Permet à un administrateur de modifier le userId d'une conversation
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UserIdAsync(System.Guid id, PatchConversation? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Rafraichir un rapport
        /// </summary>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RefreshAsync(System.Guid id, System.Guid idRapport);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Rafraichir un rapport
        /// </summary>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RefreshAsync(System.Guid id, System.Guid idRapport, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Alerte
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("erabliere")]
        public Erabliere? Erabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nom")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("envoyerA")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? EnvoyerA { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("texterA")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? TexterA { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("temperatureThresholdLow")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? TemperatureThresholdLow { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("temperatureThresholdHight")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? TemperatureThresholdHight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vacciumThresholdLow")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? VacciumThresholdLow { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vacciumThresholdHight")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? VacciumThresholdHight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("niveauBassinThresholdLow")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? NiveauBassinThresholdLow { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("niveauBassinThresholdHight")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? NiveauBassinThresholdHight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isEnable")]
        public bool? IsEnable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastOccurence")]
        public System.DateTimeOffset? LastOccurence { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlerteCapteur
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idCapteur")]
        public System.Guid? IdCapteur { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("capteur")]
        public Capteur? Capteur { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nom")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("envoyerA")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? EnvoyerA { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("texterA")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? TexterA { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dc")]
        public System.DateTimeOffset? Dc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("minVaue")]
        public double? MinVaue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maxValue")]
        public double? MaxValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isEnable")]
        public bool? IsEnable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastOccurence")]
        public System.DateTimeOffset? LastOccurence { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public Capteur? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ownerId")]
        public System.Guid? OwnerId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiKey
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string? Key { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("creationTime")]
        public System.DateTimeOffset? CreationTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("revocationTime")]
        public System.DateTimeOffset? RevocationTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deletionTime")]
        public System.DateTimeOffset? DeletionTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public System.Guid? CustomerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public Customer? Customer { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("subscriptionId")]
        public string? SubscriptionId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Appareil
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("erabliere")]
        public Erabliere? Erabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("latitude")]
        public double? Latitude { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("longitude")]
        public double? Longitude { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("capteurs")]
        public System.Collections.Generic.ICollection<Capteur>? Capteurs { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dc")]
        public System.DateTimeOffset? Dc { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Baril
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("df")]
        public System.DateTimeOffset? Df { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("erabliere")]
        public Erabliere? Erabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("qe")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? Qe { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("q")]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? Q { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Capteur
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("erabliere")]
        public Erabliere? Erabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("donneesCapteur")]
        public System.Collections.Generic.ICollection<DonneeCapteur>? DonneesCapteur { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("alertesCapteur")]
        public System.Collections.Generic.ICollection<AlerteCapteur>? AlertesCapteur { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nom")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indiceOrdre")]
        public int? IndiceOrdre { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("symbole")]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string? Symbole { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taille")]
        [System.ComponentModel.DataAnnotations.Range(1, 12)]
        public int? Taille { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("batteryLevel")]
        public int? BatteryLevel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externalId")]
        public string? ExternalId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastMessageTime")]
        public System.DateTimeOffset? LastMessageTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("online")]
        public bool? Online { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reportFrequency")]
        public int? ReportFrequency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherCapteurDashboard")]
        public bool? AfficherCapteurDashboard { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ajouterDonneeDepuisInterface")]
        public bool? AjouterDonneeDepuisInterface { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayType")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? DisplayType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayTop")]
        public int? DisplayTop { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dc")]
        public System.DateTimeOffset? Dc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("latitude")]
        public double? Latitude { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("longitude")]
        public double? Longitude { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("appareil")]
        public Appareil? Appareil { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("appareilId")]
        public System.Guid? AppareilId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayMin")]
        public double? DisplayMin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayMax")]
        public double? DisplayMax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("capteurStyle")]
        public CapteurStyle? CapteurStyle { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CapteurImage
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("erabliere")]
        public Erabliere? Erabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nom")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/^rtsp:\/\/[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)$/i")]
        public string Url { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("port")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength = 1)]
        public string Port { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("identifiant")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Identifiant { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("motDePasse")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? MotDePasse { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ordre")]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int? Ordre { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("latitude")]
        public double? Latitude { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("longitude")]
        public double? Longitude { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dc")]
        public System.DateTimeOffset? Dc { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CapteurStyle
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("backgroundColor")]
        public string? BackgroundColor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("color")]
        public string? Color { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("borderColor")]
        public string? BorderColor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fill")]
        public string? Fill { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pointBackgroundColor")]
        public string? PointBackgroundColor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pointBorderColor")]
        public string? PointBorderColor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tension")]
        public double? Tension { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dSetBorderColor")]
        public string? DSetBorderColor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("useGradient")]
        public bool? UseGradient { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("g1Stop")]
        public double? G1Stop { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("g2Stop")]
        public double? G2Stop { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("g3Stop")]
        public double? G3Stop { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("g1Color")]
        public string? G1Color { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("g2Color")]
        public string? G2Color { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("g3Color")]
        public string? G3Color { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idCapteur")]
        public System.Guid? IdCapteur { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("capteur")]
        public Capteur? Capteur { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Conversation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? UserId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("systemMessage")]
        public string? SystemMessage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]
        public bool? IsPublic { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdOn")]
        public System.DateTimeOffset? CreatedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastMessageDate")]
        public System.DateTimeOffset? LastMessageDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("messages")]
        public System.Collections.Generic.ICollection<Message>? Messages { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Customer
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("uniqueName")]
        public string? UniqueName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("secondaryEmail")]
        public string? SecondaryEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountType")]
        public string? AccountType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stripeId")]
        public string? StripeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externalAccountUrl")]
        public string? ExternalAccountUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("timeZone")]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string? TimeZone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("creationTime")]
        public System.DateTimeOffset? CreationTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastAccessTime")]
        public System.DateTimeOffset? LastAccessTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("apiKeys")]
        public System.Collections.Generic.ICollection<ApiKey>? ApiKeys { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerErablieres")]
        public System.Collections.Generic.ICollection<CustomerErabliere>? CustomerErablieres { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerErabliere
    {

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("erabliere")]
        public Erabliere? Erabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idCustomer")]
        public System.Guid? IdCustomer { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public Customer? Customer { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("access")]
        public int? Access { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indiceOrdre")]
        public int? IndiceOrdre { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dc")]
        public System.DateTimeOffset? Dc { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dailyforecast
    {

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        public System.DateTimeOffset? Date { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("epochDate")]
        public int? EpochDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("temperature")]
        public Temperature? Temperature { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("day")]
        public Day? Day { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("night")]
        public Night? Night { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sources")]
        public System.Collections.Generic.ICollection<string>? Sources { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mobileLink")]
        public string? MobileLink { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("link")]
        public string? Link { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Day
    {

        [System.Text.Json.Serialization.JsonPropertyName("icon")]
        public int? Icon { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("iconPhrase")]
        public string? IconPhrase { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrecipitation")]
        public bool? HasPrecipitation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("precipitationType")]
        public string? PrecipitationType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("precipitationIntensity")]
        public string? PrecipitationIntensity { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Documentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("erabliere")]
        public Erabliere? Erabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("created")]
        public System.DateTimeOffset? Created { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("text")]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? Text { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileExtension")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? FileExtension { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("file")]
        public byte[]? File { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileSize")]
        public int? FileSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileName")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? FileName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externalStorageType")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? ExternalStorageType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externalStorageUrl")]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? ExternalStorageUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]
        public bool? IsPublic { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dompeux
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("t")]
        public System.DateTimeOffset? T { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dd")]
        public System.DateTimeOffset? Dd { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("df")]
        public System.DateTimeOffset? Df { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("erabliere")]
        public Erabliere? Erabliere { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Donnee
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("d")]
        public System.DateTimeOffset? D { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("t")]
        public int? T { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nb")]
        public int? Nb { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("v")]
        public int? V { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("erabliere")]
        public Erabliere? Erabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pi")]
        public int? Pi { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nboc")]
        public int? Nboc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("iddp")]
        public System.Guid? Iddp { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DonneeCapteur
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valeur")]
        public double? Valeur { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("text")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Text { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("d")]
        public System.DateTimeOffset? D { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idCapteur")]
        public System.Guid? IdCapteur { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("capteur")]
        public Capteur? Capteur { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public Capteur? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ownerId")]
        public System.Guid? OwnerId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Erabliere
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nom")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ipRule")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? IpRule { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indiceOrdre")]
        public int? IndiceOrdre { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("codePostal")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CodePostal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherPredictionMeteoJour")]
        public bool? AfficherPredictionMeteoJour { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherPredictionMeteoHeure")]
        public bool? AfficherPredictionMeteoHeure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dimensionPanneauImage")]
        [System.ComponentModel.DataAnnotations.Range(1, 12)]
        public int? DimensionPanneauImage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherSectionBaril")]
        public bool? AfficherSectionBaril { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherTrioDonnees")]
        public bool? AfficherTrioDonnees { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherSectionDompeux")]
        public bool? AfficherSectionDompeux { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]
        public bool? IsPublic { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("capteurs")]
        public System.Collections.Generic.ICollection<Capteur>? Capteurs { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("capteursImage")]
        public System.Collections.Generic.ICollection<CapteurImage>? CapteursImage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("donnees")]
        public System.Collections.Generic.ICollection<Donnee>? Donnees { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barils")]
        public System.Collections.Generic.ICollection<Baril>? Barils { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dompeux")]
        public System.Collections.Generic.ICollection<Dompeux>? Dompeux { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public System.Collections.Generic.ICollection<Note>? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentations")]
        public System.Collections.Generic.ICollection<Documentation>? Documentations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("alertes")]
        public System.Collections.Generic.ICollection<Alerte>? Alertes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rapports")]
        public System.Collections.Generic.ICollection<Rapport>? Rapports { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inspections")]
        public System.Collections.Generic.ICollection<Inspection>? Inspections { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerErablieres")]
        public System.Collections.Generic.ICollection<CustomerErabliere>? CustomerErablieres { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("latitude")]
        public double? Latitude { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("longitude")]
        public double? Longitude { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dc")]
        public System.DateTimeOffset? Dc { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetCapteur
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nom")]
        public string? Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("symbole")]
        public string? Symbole { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherCapteurDashboard")]
        public bool? AfficherCapteurDashboard { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ajouterDonneeDepuisInterface")]
        public bool? AjouterDonneeDepuisInterface { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dc")]
        public System.DateTimeOffset? Dc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indiceOrdre")]
        public int? IndiceOrdre { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taille")]
        public string? Taille { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("batteryLevel")]
        public int? BatteryLevel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externalId")]
        public string? ExternalId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastMessageTime")]
        public System.DateTimeOffset? LastMessageTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("online")]
        public bool? Online { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reportFrequency")]
        public int? ReportFrequency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayType")]
        public string? DisplayType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayTop")]
        public int? DisplayTop { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayMin")]
        public double? DisplayMin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayMax")]
        public double? DisplayMax { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetCapteurImage
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nom")]
        public string? Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        public string? Url { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("port")]
        public string? Port { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("identifiant")]
        public string? Identifiant { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("motDePasse")]
        public string? MotDePasse { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ordre")]
        public int? Ordre { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetCustomer
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("uniqueName")]
        public string? UniqueName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetCustomerAccess
    {

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("erabliere")]
        public GetCustomerAccessErabliere? Erabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idCustomer")]
        public System.Guid? IdCustomer { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public GetCustomerAccessCustomer? Customer { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("access")]
        public int? Access { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetCustomerAccessCustomer
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("uniqueName")]
        public string? UniqueName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetCustomerAccessErabliere
    {

        [System.Text.Json.Serialization.JsonPropertyName("nom")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Nom { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDompeux
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("t")]
        public System.DateTimeOffset? T { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dd")]
        public System.DateTimeOffset? Dd { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("df")]
        public System.DateTimeOffset? Df { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDonnee
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("d")]
        public System.DateTimeOffset? D { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("t")]
        public int? T { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nb")]
        public int? Nb { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("v")]
        public int? V { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pi")]
        public int? Pi { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nboc")]
        public int? Nboc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("iddp")]
        public System.Guid? Iddp { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDonneesCapteur
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valeur")]
        public int? Valeur { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("text")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Text { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("d")]
        public System.DateTimeOffset? D { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetDonneesCapteurV2
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valeur")]
        public double? Valeur { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("text")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Text { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("d")]
        public System.DateTimeOffset? D { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetImageInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("uniqueId")]
        public int? UniqueId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("object")]
        [System.ComponentModel.DataAnnotations.StringLength(400)]
        public string? Object { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("azureImageAPIInfo")]
        public string? AzureImageAPIInfo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("images")]
        public byte[]? Images { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateAjout")]
        public System.DateTimeOffset? DateAjout { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateEmail")]
        public System.DateTimeOffset? DateEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("emailStatesId")]
        public System.Guid? EmailStatesId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externalOwner")]
        public System.Guid? ExternalOwner { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetMapAccessToken
    {

        [System.Text.Json.Serialization.JsonPropertyName("accessToken")]
        public string? AccessToken { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GuidDeleteErabliere
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GuidGetDonneesCapteurIEnumerablePair
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valeur")]
        public System.Collections.Generic.ICollection<GetDonneesCapteur>? Valeur { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GuidGetDonneesCapteurV2IEnumerablePair
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valeur")]
        public System.Collections.Generic.ICollection<GetDonneesCapteurV2>? Valeur { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Headline
    {

        [System.Text.Json.Serialization.JsonPropertyName("effectiveDate")]
        public System.DateTimeOffset? EffectiveDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("effectiveEpochDate")]
        public int? EffectiveEpochDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("severity")]
        public int? Severity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("text")]
        public string? Text { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("category")]
        public string? Category { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        public System.DateTimeOffset? EndDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("endEpochDate")]
        public int? EndEpochDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mobileLink")]
        public string? MobileLink { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("link")]
        public string? Link { get; set; } = default!;

    }

    /// <summary>
    /// Hourly forecast temperature
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HourlyForecastTemperature
    {
        /// <summary>
        /// Value of the temperature
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public double? Value { get; set; } = default!;

        /// <summary>
        /// Unit of the temperature
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        public string? Unit { get; set; } = default!;

        /// <summary>
        /// Unit type of the temperature
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("unitType")]
        public int? UnitType { get; set; } = default!;

    }

    /// <summary>
    /// Hourly weather forecast response
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HourlyWeatherForecastResponse
    {
        /// <summary>
        /// Date and time of the forecast
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dateTime")]
        public System.DateTimeOffset? DateTime { get; set; } = default!;

        /// <summary>
        /// Epoch date time
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("epochDateTime")]
        public int? EpochDateTime { get; set; } = default!;

        /// <summary>
        /// Weather icon
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("weatherIcon")]
        public int? WeatherIcon { get; set; } = default!;

        /// <summary>
        /// Icon phrase
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("iconPhrase")]
        public string? IconPhrase { get; set; } = default!;

        /// <summary>
        /// Has precipitation
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("hasPrecipitation")]
        public bool? HasPrecipitation { get; set; } = default!;

        /// <summary>
        /// Type of precipitation
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("precipitationType")]
        public string? PrecipitationType { get; set; } = default!;

        /// <summary>
        /// Intensity of precipitation
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("precipitationIntensity")]
        public string? PrecipitationIntensity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("temperature")]
        public HourlyForecastTemperature? Temperature { get; set; } = default!;

        /// <summary>
        /// Link for mobile devices
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mobileLink")]
        public string? MobileLink { get; set; } = default!;

        /// <summary>
        /// Link for web devices
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("link")]
        public string? Link { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Inspection
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("erabliere")]
        public Erabliere? Erabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        public System.DateTimeOffset? Date { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("titre")]
        public string? Titre { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("donnees")]
        public System.Collections.Generic.ICollection<InspectionDonnees>? Donnees { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dc")]
        public System.DateTimeOffset? Dc { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InspectionDonnees
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ownerId")]
        public System.Guid? OwnerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public Inspection? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("titre")]
        public string? Titre { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("imgUrl")]
        public string? ImgUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("imgBytes")]
        public byte[]? ImgBytes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Maximum
    {

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public float? Value { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        public string? Unit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitType")]
        public int? UnitType { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Message
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("conversationId")]
        public System.Guid? ConversationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("conversation")]
        public Conversation? Conversation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("content")]
        public string? Content { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isUser")]
        public bool? IsUser { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Minimum
    {

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public float? Value { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]
        public string? Unit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitType")]
        public int? UnitType { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Night
    {

        [System.Text.Json.Serialization.JsonPropertyName("icon")]
        public int? Icon { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("iconPhrase")]
        public string? IconPhrase { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrecipitation")]
        public bool? HasPrecipitation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("precipitationType")]
        public string? PrecipitationType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("precipitationIntensity")]
        public string? PrecipitationIntensity { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Note
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("erabliere")]
        public Erabliere? Erabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("text")]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? Text { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileExtension")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? FileExtension { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("file")]
        public byte[]? File { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileSize")]
        public int? FileSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileName")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? FileName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externalStorageType")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? ExternalStorageType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externalStorageUrl")]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? ExternalStorageUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]
        public bool? IsPublic { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("created")]
        public System.DateTimeOffset? Created { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("noteDate")]
        public System.DateTimeOffset? NoteDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notificationFilter")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? NotificationFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rappel")]
        public Rappel? Rappel { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchConversation
    {

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string? UserId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]
        public bool? IsPublic { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostAccess
    {

        [System.Text.Json.Serialization.JsonPropertyName("access")]
        [System.ComponentModel.DataAnnotations.Range(0, 15)]
        public int Access { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostApiKey
    {

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid CustomerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostCapteur
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nom")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("symbole")]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string? Symbole { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dc")]
        public System.DateTimeOffset? Dc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherCapteurDashboard")]
        public bool? AfficherCapteurDashboard { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ajouterDonneeDepuisInterface")]
        public bool? AjouterDonneeDepuisInterface { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externalId")]
        public string? ExternalId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayMin")]
        public double? DisplayMin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayMax")]
        public double? DisplayMax { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostCapteurImage
    {

        [System.Text.Json.Serialization.JsonPropertyName("nom")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^rtsp:\/\/[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}([-a-zA-Z0-9()@:%_+.~#?&/=]*)$")]
        public string Url { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("port")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength = 1)]
        public string Port { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("identifiant")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Identifiant { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("motDePasse")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? MotDePasse { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostDocumentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("created")]
        public System.DateTimeOffset? Created { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("text")]
        public string? Text { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileExtension")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? FileExtension { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("file")]
        public string? File { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostDonnee
    {

        [System.Text.Json.Serialization.JsonPropertyName("d")]
        public System.DateTimeOffset? D { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("t")]
        public int? T { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nb")]
        public int? Nb { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("v")]
        public int? V { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid IdErabliere { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostDonneeCapteur
    {

        [System.Text.Json.Serialization.JsonPropertyName("v")]
        public int? V { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("text")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Text { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("d")]
        public System.DateTimeOffset? D { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idCapteur")]
        public System.Guid? IdCapteur { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostDonneeCapteurV2
    {

        [System.Text.Json.Serialization.JsonPropertyName("v")]
        public double? V { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("text")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Text { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("d")]
        public System.DateTimeOffset? D { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idCapteur")]
        public System.Guid? IdCapteur { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostErabliere
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nom")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ipRules")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? IpRules { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indiceOrdre")]
        public int? IndiceOrdre { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("codePostal")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CodePostal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherSectionBaril")]
        public bool? AfficherSectionBaril { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherTrioDonnees")]
        public bool? AfficherTrioDonnees { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherSectionDompeux")]
        public bool? AfficherSectionDompeux { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]
        public bool? IsPublic { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostImagesGenerationModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("imageCount")]
        public int? ImageCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("prompt")]
        public string? Prompt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("size")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(1024x1024|1792x1024|1024x1792)$")]
        public string? Size { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostNote
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("text")]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? Text { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("file")]
        public string? File { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileExtension")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? FileExtension { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("created")]
        public System.DateTimeOffset? Created { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("noteDate")]
        public System.DateTimeOffset? NoteDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rappel")]
        public PostRappel? Rappel { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostNoteMultipartResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("text")]
        public string? Text { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileExtension")]
        public string? FileExtension { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("created")]
        public System.DateTimeOffset? Created { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("noteDate")]
        public System.DateTimeOffset? NoteDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPrompt
    {

        [System.Text.Json.Serialization.JsonPropertyName("systemMessage")]
        public string? SystemMessage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("prompt")]
        public string? Prompt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("conversationId")]
        public System.Guid? ConversationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("promptType")]
        public string? PromptType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maxToken")]
        public int? MaxToken { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostPromptResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("prompt")]
        public PostPrompt? Prompt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("conversation")]
        public Conversation? Conversation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("response")]
        public Message? Response { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostRappel
    {

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool? IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateRappel")]
        public System.DateTimeOffset? DateRappel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateRappelFin")]
        public System.DateTimeOffset? DateRappelFin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("periodicite")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? Periodicite { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostRapportDegreeJourRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idRapport")]
        public System.Guid? IdRapport { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idCapteur")]
        public System.Guid? IdCapteur { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("utiliserTemperatureTrioDonnee")]
        public bool? UtiliserTemperatureTrioDonnee { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateDebut")]
        public System.DateTimeOffset? DateDebut { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateFin")]
        public System.DateTimeOffset? DateFin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("seuilTemperature")]
        public double? SeuilTemperature { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherDansDashboard")]
        public bool? AfficherDansDashboard { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostTraduction
    {

        [System.Text.Json.Serialization.JsonPropertyName("text")]
        public string? Text { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemDetails
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public int? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("detail")]
        public string? Detail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("instance")]
        public string? Instance { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutAccess
    {

        [System.Text.Json.Serialization.JsonPropertyName("access")]
        [System.ComponentModel.DataAnnotations.Range(0, 15)]
        public int Access { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutAdminErabliere
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nom")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ipRule")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? IpRule { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indiceOrdre")]
        public int? IndiceOrdre { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("codePostal")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CodePostal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherPredictionMeteoJour")]
        public bool? AfficherPredictionMeteoJour { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherPredictionMeteoHeure")]
        public bool? AfficherPredictionMeteoHeure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dimensionPanneauImage")]
        [System.ComponentModel.DataAnnotations.Range(1, 12)]
        public int? DimensionPanneauImage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherSectionBaril")]
        public bool? AfficherSectionBaril { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherTrioDonnees")]
        public bool? AfficherTrioDonnees { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherSectionDompeux")]
        public bool? AfficherSectionDompeux { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]
        public bool? IsPublic { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dc")]
        public System.DateTimeOffset? Dc { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutAlerteCapteur
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idCapteur")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid IdCapteur { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nom")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("envoyerA")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? EnvoyerA { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("texterA")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? TexterA { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("minVaue")]
        public int? MinVaue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maxValue")]
        public int? MaxValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isEnable")]
        public bool? IsEnable { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutApiKeyName
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutCapteur
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nom")]
        public string? Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("symbole")]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string? Symbole { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherCapteurDashboard")]
        public bool? AfficherCapteurDashboard { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ajouterDonneeDepuisInterface")]
        public bool? AjouterDonneeDepuisInterface { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dc")]
        public System.DateTimeOffset? Dc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indiceOrdre")]
        public int? IndiceOrdre { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taille")]
        [System.ComponentModel.DataAnnotations.Range(1, 12)]
        public int? Taille { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("batteryLevel")]
        public int? BatteryLevel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externalId")]
        public string? ExternalId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastMessageTime")]
        public System.DateTimeOffset? LastMessageTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("online")]
        public bool? Online { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reportFrequency")]
        public int? ReportFrequency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayType")]
        public string? DisplayType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayTop")]
        public int? DisplayTop { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayMin")]
        public double? DisplayMin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayMax")]
        public double? DisplayMax { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutCapteurImage
    {

        [System.Text.Json.Serialization.JsonPropertyName("nom")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^rtsp:\/\/[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}([-a-zA-Z0-9()@:%_+.~#?&/=]*)$")]
        public string Url { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("port")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength = 1)]
        public string Port { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("identifiant")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Identifiant { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("motDePasse")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? MotDePasse { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutCapteurStyle
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("backgroundColor")]
        public string? BackgroundColor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("color")]
        public string? Color { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("borderColor")]
        public string? BorderColor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fill")]
        public string? Fill { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pointBackgroundColor")]
        public string? PointBackgroundColor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pointBorderColor")]
        public string? PointBorderColor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tension")]
        public double? Tension { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dSetBorderColor")]
        public string? DSetBorderColor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("useGradient")]
        public bool? UseGradient { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("g1Stop")]
        public double? G1Stop { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("g2Stop")]
        public double? G2Stop { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("g3Stop")]
        public double? G3Stop { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("g1Color")]
        public string? G1Color { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("g2Color")]
        public string? G2Color { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("g3Color")]
        public string? G3Color { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idCapteur")]
        public System.Guid? IdCapteur { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutCustomer
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutDocumentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("text")]
        public string? Text { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileExtension")]
        public string? FileExtension { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutDonnee
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("t")]
        public int? T { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nb")]
        public int? Nb { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("v")]
        public int? V { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutErabliere
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nom")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ipRule")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? IpRule { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indiceOrdre")]
        public int? IndiceOrdre { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("codePostal")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string? CodePostal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherPredictionMeteoJour")]
        public bool? AfficherPredictionMeteoJour { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherPredictionMeteoHeure")]
        public bool? AfficherPredictionMeteoHeure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dimensionPanneauImage")]
        [System.ComponentModel.DataAnnotations.Range(1, 12)]
        public int? DimensionPanneauImage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherSectionBaril")]
        public bool? AfficherSectionBaril { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherTrioDonnees")]
        public bool? AfficherTrioDonnees { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherSectionDompeux")]
        public bool? AfficherSectionDompeux { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPublic")]
        public bool? IsPublic { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("longitude")]
        public double? Longitude { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("latitude")]
        public double? Latitude { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutNote
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("noteDate")]
        public System.DateTimeOffset? NoteDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rappel")]
        public PutRappel? Rappel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notificationFilter")]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? NotificationFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("text")]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? Text { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileExtension")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? FileExtension { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutRappel
    {

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool? IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateRappel")]
        public System.DateTimeOffset? DateRappel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateRappelFin")]
        public System.DateTimeOffset? DateRappelFin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("periodicite")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? Periodicite { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rappel
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool? IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateRappel")]
        public System.DateTimeOffset? DateRappel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateRappelFin")]
        public System.DateTimeOffset? DateRappelFin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("periodicite")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? Periodicite { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("noteId")]
        public System.Guid? NoteId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public Note? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dc")]
        public System.DateTimeOffset? Dc { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rapport
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idErabliere")]
        public System.Guid? IdErabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("erabliere")]
        public Erabliere? Erabliere { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("utiliserTemperatureTrioDonnee")]
        public bool? UtiliserTemperatureTrioDonnee { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateDebut")]
        public System.DateTimeOffset? DateDebut { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateFin")]
        public System.DateTimeOffset? DateFin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateModification")]
        public System.DateTimeOffset? DateModification { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("seuilTemperature")]
        public double? SeuilTemperature { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("afficherDansDashboard")]
        public bool? AfficherDansDashboard { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requestParameters")]
        public string? RequestParameters { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nom")]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Nom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("moyenne")]
        public double? Moyenne { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("somme")]
        public double? Somme { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("min")]
        public double? Min { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("max")]
        public double? Max { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("donnees")]
        public System.Collections.Generic.ICollection<RapportDonnees>? Donnees { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dc")]
        public System.DateTimeOffset? Dc { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RapportDonnees
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ownerId")]
        public System.Guid? OwnerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public Rapport? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        public System.DateTimeOffset? Date { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("moyenne")]
        public double? Moyenne { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("somme")]
        public double? Somme { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("min")]
        public double? Min { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("max")]
        public double? Max { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Temperature
    {

        [System.Text.Json.Serialization.JsonPropertyName("minimum")]
        public Minimum? Minimum { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maximum")]
        public Maximum? Maximum { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherForecastResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("headline")]
        public Headline? Headline { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dailyForecasts")]
        public System.Collections.Generic.ICollection<Dailyforecast>? DailyForecasts { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string? fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string? fileName, string? contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string? FileName { get; private set; }

        public string? ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable? _client;
        private System.IDisposable? _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable? client, System.IDisposable? response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625