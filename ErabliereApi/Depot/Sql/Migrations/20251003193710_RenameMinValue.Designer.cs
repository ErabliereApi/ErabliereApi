// <auto-generated />
using System;
using ErabliereApi.Depot.Sql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Depot.Sql.Migrations
{
    [DbContext(typeof(ErabliereDbContext))]
    [Migration("20251003193710_RenameMinValue")]
    partial class RenameMinValue
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ErabliereApi.Donnees.Alerte", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DC")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DM")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EnvoyerA")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("IdErabliere")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastOccurence")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NiveauBassinThresholdHight")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NiveauBassinThresholdLow")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nom")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TemperatureThresholdHight")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TemperatureThresholdLow")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TexterA")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("VacciumThresholdHight")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VacciumThresholdLow")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdErabliere");

                    b.ToTable("Alertes");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.AlerteCapteur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DC")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset?>("DM")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EnvoyerA")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("IdCapteur")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastOccurence")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("MaxValue")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("MinValue")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)")
                        .HasColumnName("MinValue");

                    b.Property<string>("Nom")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TexterA")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IdCapteur");

                    b.ToTable("AlerteCapteurs");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.ApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DeletionTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastUsage")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("RevocationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SubscriptionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Appareil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DC")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DM")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ErabliereId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdErabliere")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StatutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TempsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ErabliereId");

                    b.HasIndex("StatutId");

                    b.HasIndex("TempsId");

                    b.ToTable("Appareils");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.AppareilAdresse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Addr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Addrtype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AppareilId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdAppareil")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Vendeur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppareilId");

                    b.ToTable("AppareilAdresse");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.AppareilStatut", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Etat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdAppareil")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Raison")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RaisonTTL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppareilStatut");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.AppareilTempsInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("DateDebut")
                        .HasColumnType("bigint");

                    b.Property<long>("DateFin")
                        .HasColumnType("bigint");

                    b.Property<Guid>("IdAppareil")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Rttvar")
                        .HasColumnType("bigint");

                    b.Property<long>("Strtt")
                        .HasColumnType("bigint");

                    b.Property<long>("To")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AppareilTempsInfo");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Baril", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DF")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("IdErabliere")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Q")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("QE")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("IdErabliere");

                    b.ToTable("Barils");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Capteur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AfficherCapteurDashboard")
                        .HasColumnType("bit");

                    b.Property<bool>("AjouterDonneeDepuisInterface")
                        .HasColumnType("bit");

                    b.Property<Guid?>("AppareilId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte?>("BatteryLevel")
                        .HasColumnType("tinyint");

                    b.Property<DateTimeOffset?>("DC")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DM")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("DisplayMax")
                        .HasColumnType("float");

                    b.Property<double?>("DisplayMin")
                        .HasColumnType("float");

                    b.Property<short?>("DisplayTop")
                        .HasColumnType("smallint");

                    b.Property<string>("DisplayType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("IdErabliere")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("IndiceOrdre")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastMessageTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Online")
                        .HasColumnType("bit");

                    b.Property<int?>("ReportFrequency")
                        .HasColumnType("int");

                    b.Property<string>("Symbole")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<byte?>("Taille")
                        .HasColumnType("tinyint");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AppareilId");

                    b.HasIndex("IdErabliere");

                    b.ToTable("Capteurs");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.CapteurImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DC")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DM")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("IdErabliere")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Identifiant")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("MotDePasse")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Ordre")
                        .HasColumnType("int");

                    b.Property<string>("Port")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IdErabliere");

                    b.ToTable("CapteurImage");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.CapteurStyle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BackgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BorderColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DSetBorderColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("G1Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("G1Stop")
                        .HasColumnType("float");

                    b.Property<string>("G2Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("G2Stop")
                        .HasColumnType("float");

                    b.Property<string>("G3Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("G3Stop")
                        .HasColumnType("float");

                    b.Property<Guid?>("IdCapteur")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PointBackgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PointBorderColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Tension")
                        .HasColumnType("float");

                    b.Property<bool>("UseGradient")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdCapteur")
                        .IsUnique()
                        .HasFilter("[IdCapteur] IS NOT NULL");

                    b.ToTable("CapteurStyles");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastMessageDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("AcceptTermsAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExternalAccountUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTimeOffset?>("LastAccessTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UniqueName")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.CustomerErabliere", b =>
                {
                    b.Property<Guid>("IdCustomer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdErabliere")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Access")
                        .HasColumnType("tinyint");

                    b.Property<DateTimeOffset?>("DC")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DM")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IndiceOrdre")
                        .HasColumnType("int");

                    b.HasKey("IdCustomer", "IdErabliere");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdErabliere");

                    b.ToTable("CustomerErablieres");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Documentation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ExternalStorageType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ExternalStorageUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<byte[]>("File")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FileName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("FileSize")
                        .HasColumnType("int");

                    b.Property<Guid?>("IdErabliere")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IdErabliere");

                    b.ToTable("Documentation");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Dompeux", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DD")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DF")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("IdErabliere")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("T")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("IdErabliere");

                    b.ToTable("Dompeux");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Donnee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("D")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("IdErabliere")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Iddp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short?>("NB")
                        .HasColumnType("smallint");

                    b.Property<int>("Nboc")
                        .HasColumnType("int");

                    b.Property<int?>("PI")
                        .HasColumnType("int");

                    b.Property<short?>("T")
                        .HasColumnType("smallint");

                    b.Property<short?>("V")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("IdErabliere");

                    b.HasIndex(new[] { "D" }, "D_index");

                    b.ToTable("Donnees");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.DonneeCapteur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("D")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("IdCapteur")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Valeur")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("IdCapteur");

                    b.HasIndex(new[] { "D" }, "D_Index");

                    b.ToTable("DonneesCapteur");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Erabliere", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Addresse")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("AfficherPredictionMeteoHeure")
                        .HasColumnType("bit");

                    b.Property<bool?>("AfficherPredictionMeteoJour")
                        .HasColumnType("bit");

                    b.Property<bool?>("AfficherSectionBaril")
                        .HasColumnType("bit");

                    b.Property<bool?>("AfficherSectionDompeux")
                        .HasColumnType("bit");

                    b.Property<bool?>("AfficherSectionHoraire")
                        .HasColumnType("bit");

                    b.Property<bool?>("AfficherTrioDonnees")
                        .HasColumnType("bit");

                    b.Property<double?>("Base")
                        .HasColumnType("float");

                    b.Property<string>("CodePostal")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTimeOffset?>("DC")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DM")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte?>("DimensionPanneauImage")
                        .HasColumnType("tinyint");

                    b.Property<int?>("IndiceOrdre")
                        .HasColumnType("int");

                    b.Property<string>("IpRule")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegionAdministrative")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("Sommet")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IsPublic");

                    b.ToTable("Erabliere");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Horaire", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dimanche")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<Guid?>("IdErabliere")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Jeudi")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Lundi")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Mardi")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Mercredi")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Samedi")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Vendredi")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.HasIndex("IdErabliere");

                    b.ToTable("Horaires");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Inspection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DC")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DM")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ErabliereId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdErabliere")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ErabliereId");

                    b.ToTable("Inspection");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.InspectionDonnees", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ImgBytes")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("InspectionDonnees");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsUser")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.NomHostAppareil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppareilId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdAppareil")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AppareilId");

                    b.ToTable("NomHostAppareil");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ExternalStorageType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ExternalStorageUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<byte[]>("File")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FileName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("FileSize")
                        .HasColumnType("int");

                    b.Property<Guid?>("IdErabliere")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("NoteDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NotificationFilter")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Text")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IdErabliere");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.PortAppareil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppareilId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EtatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdAppareil")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<Guid?>("PortServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Protocole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppareilId");

                    b.HasIndex("EtatId");

                    b.HasIndex("PortServiceId");

                    b.ToTable("PortAppareil");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.PortEtat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Etat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdPortAppareil")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Raison")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RaisonTTL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PortEtat");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.PortService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.PrimitiveCollection<string>("CPEs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdPortEtat")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Methode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Produit")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("PortService");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Rappel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DC")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DM")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateRappel")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateRappelFin")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("IdErabliere")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("NoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Periodicite")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("NoteId")
                        .IsUnique()
                        .HasFilter("[NoteId] IS NOT NULL");

                    b.ToTable("Rappels");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Rapport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AfficherDansDashboard")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("DC")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DM")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset?>("DateModification")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ErabliereId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdErabliere")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Max")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Min")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Moyenne")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequestParameters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SeuilTemperature")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Somme")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UtiliserTemperatureTrioDonnee")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ErabliereId");

                    b.ToTable("Rapports");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.RapportDonnees", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Max")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Min")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Moyenne")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Somme")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("DonneesRapports");
                });

            modelBuilder.Entity("ErabliereApi.Models.IpInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ASN")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("AS_Domain")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AS_Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTimeOffset?>("DC")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DM")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsAllowed")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<DateTimeOffset?>("TTL")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Ip");

                    b.ToTable("IpInfos");
                });

            modelBuilder.Entity("ErabliereApi.Models.IpNetworkAsnInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ASN")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("AS_Domain")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AS_Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Continent")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContinentCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<bool>("IsAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("Network")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("Id");

                    b.HasIndex("ASN");

                    b.HasIndex("CountryCode");

                    b.HasIndex("Network");

                    b.ToTable("IpNetworkAsnInfos");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Alerte", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Erabliere", "Erabliere")
                        .WithMany("Alertes")
                        .HasForeignKey("IdErabliere")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Erabliere");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.AlerteCapteur", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Capteur", "Capteur")
                        .WithMany("AlertesCapteur")
                        .HasForeignKey("IdCapteur")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Capteur");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.ApiKey", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Customer", "Customer")
                        .WithMany("ApiKeys")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Appareil", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Erabliere", "Erabliere")
                        .WithMany()
                        .HasForeignKey("ErabliereId");

                    b.HasOne("ErabliereApi.Donnees.AppareilStatut", "Statut")
                        .WithMany()
                        .HasForeignKey("StatutId");

                    b.HasOne("ErabliereApi.Donnees.AppareilTempsInfo", "Temps")
                        .WithMany()
                        .HasForeignKey("TempsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Erabliere");

                    b.Navigation("Statut");

                    b.Navigation("Temps");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.AppareilAdresse", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Appareil", null)
                        .WithMany("Adresses")
                        .HasForeignKey("AppareilId");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Baril", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Erabliere", "Erabliere")
                        .WithMany("Barils")
                        .HasForeignKey("IdErabliere")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Erabliere");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Capteur", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Appareil", "Appareil")
                        .WithMany("Capteurs")
                        .HasForeignKey("AppareilId");

                    b.HasOne("ErabliereApi.Donnees.Erabliere", "Erabliere")
                        .WithMany("Capteurs")
                        .HasForeignKey("IdErabliere")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Appareil");

                    b.Navigation("Erabliere");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.CapteurImage", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Erabliere", "Erabliere")
                        .WithMany("CapteursImage")
                        .HasForeignKey("IdErabliere")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Erabliere");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.CapteurStyle", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Capteur", "Capteur")
                        .WithOne("CapteurStyle")
                        .HasForeignKey("ErabliereApi.Donnees.CapteurStyle", "IdCapteur");

                    b.Navigation("Capteur");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.CustomerErabliere", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Customer", "Customer")
                        .WithMany("CustomerErablieres")
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ErabliereApi.Donnees.Erabliere", "Erabliere")
                        .WithMany("CustomerErablieres")
                        .HasForeignKey("IdErabliere")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Erabliere");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Documentation", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Erabliere", "Erabliere")
                        .WithMany("Documentations")
                        .HasForeignKey("IdErabliere")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Erabliere");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Dompeux", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Erabliere", "Erabliere")
                        .WithMany("Dompeux")
                        .HasForeignKey("IdErabliere")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Erabliere");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Donnee", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Erabliere", "Erabliere")
                        .WithMany("Donnees")
                        .HasForeignKey("IdErabliere")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Erabliere");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.DonneeCapteur", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Capteur", "Capteur")
                        .WithMany("DonneesCapteur")
                        .HasForeignKey("IdCapteur")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Capteur");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Horaire", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Erabliere", "Erabliere")
                        .WithMany("Horaires")
                        .HasForeignKey("IdErabliere");

                    b.Navigation("Erabliere");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Inspection", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Erabliere", "Erabliere")
                        .WithMany("Inspections")
                        .HasForeignKey("ErabliereId");

                    b.Navigation("Erabliere");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.InspectionDonnees", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Inspection", "Owner")
                        .WithMany("Donnees")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Message", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId");

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.NomHostAppareil", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Appareil", null)
                        .WithMany("NomsHost")
                        .HasForeignKey("AppareilId");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Note", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Erabliere", "Erabliere")
                        .WithMany("Notes")
                        .HasForeignKey("IdErabliere")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Erabliere");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.PortAppareil", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Appareil", null)
                        .WithMany("Ports")
                        .HasForeignKey("AppareilId");

                    b.HasOne("ErabliereApi.Donnees.PortEtat", "Etat")
                        .WithMany()
                        .HasForeignKey("EtatId");

                    b.HasOne("ErabliereApi.Donnees.PortService", "PortService")
                        .WithMany()
                        .HasForeignKey("PortServiceId");

                    b.Navigation("Etat");

                    b.Navigation("PortService");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Rappel", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Note", "Note")
                        .WithOne("Rappel")
                        .HasForeignKey("ErabliereApi.Donnees.Rappel", "NoteId");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Rapport", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Erabliere", "Erabliere")
                        .WithMany("Rapports")
                        .HasForeignKey("ErabliereId");

                    b.Navigation("Erabliere");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.RapportDonnees", b =>
                {
                    b.HasOne("ErabliereApi.Donnees.Rapport", "Owner")
                        .WithMany("Donnees")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Appareil", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("Capteurs");

                    b.Navigation("NomsHost");

                    b.Navigation("Ports");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Capteur", b =>
                {
                    b.Navigation("AlertesCapteur");

                    b.Navigation("CapteurStyle");

                    b.Navigation("DonneesCapteur");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Customer", b =>
                {
                    b.Navigation("ApiKeys");

                    b.Navigation("CustomerErablieres");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Erabliere", b =>
                {
                    b.Navigation("Alertes");

                    b.Navigation("Barils");

                    b.Navigation("Capteurs");

                    b.Navigation("CapteursImage");

                    b.Navigation("CustomerErablieres");

                    b.Navigation("Documentations");

                    b.Navigation("Dompeux");

                    b.Navigation("Donnees");

                    b.Navigation("Horaires");

                    b.Navigation("Inspections");

                    b.Navigation("Notes");

                    b.Navigation("Rapports");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Inspection", b =>
                {
                    b.Navigation("Donnees");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Note", b =>
                {
                    b.Navigation("Rappel");
                });

            modelBuilder.Entity("ErabliereApi.Donnees.Rapport", b =>
                {
                    b.Navigation("Donnees");
                });
#pragma warning restore 612, 618
        }
    }
}
