name: ErabliereAPI-Test

on: 
  workflow_run:
      workflows: ["ErabliereAPI-Image"]
      branches: [master]
      types: 
        - completed
  workflow_dispatch:

env:
  NAMESPACE: erabliereapi-staging

jobs:
  run_tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # Connect to Azure Kubernetes
      - name: Azure Kubernetes set context
        uses: Azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          resource-group: 'erabliereapi'
          cluster-name: 'kerabliereapi'

      # Deploy to kubernetes
      - name: Kubectl newman test workflow
        run: |
          kubectl config current-context
          
          # create the staging namespace
          kubectl apply -f Infrastructure/kubernetes/staging/namespace.yaml

          # create a secret for the database
          kubectl create secret generic erabliereapi-sql-credentials --from-literal=connexionstring='${{ secrets.SQL_STAGING_CONNEXION_STRING }}' -n $NAMESPACE

          # create the staging deployment
          kubectl apply -f Infrastructure/kubernetes/staging/deployment.yaml -n $NAMESPACE

          # wait for the deployment to be ready
          kubectl rollout status deployment erabliereapi-deployment -n $NAMESPACE

          # create the staging service
          kubectl apply -f Infrastructure/kubernetes/staging/service.yaml -n $NAMESPACE

          # create a configmap from the Postman folder
          kubectl create configmap erabliereapi-postman-test --from-file=Postman/ --dry-run=client -o yaml | kubectl apply -f - -n $NAMESPACE

          # create the newman pod
          kubectl apply -f Infrastructure/kubernetes/staging/newman-pod.yaml -n $NAMESPACE

          # wait for the newman pod to be ready
          kubectl wait --for=condition=Ready -n $NAMESPACE pod/securetesting-newman --timeout=60s

          # attach to the newman pod
          kubectl attach securetesting-newman -c securetesting-newman -n $NAMESPACE

          # extract the test results
          kubectl cp securetesting-newman:test-results . -c file-copy -n $NAMESPACE

      # Analyse newman results
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3.0.2
        if: always() # always run even if the previous step fails
        with:
          report_paths: 'junit-report.xml'
          require_tests: true
          fail_on_failure: true

      # Run the cypress test
      - name: Kubectl cypress test workflow
        run: |

          # create the cypress test configmap
          kubectl create configmap erabliereiu-cypress-fixture --from-file=ErabliereIU/cyress/fixtures/ --dry-run=client -o yaml | kubectl apply -f - -n $NAMESPACE
          kubectl create configmap erabliereiu-cypress-integration --from-file=ErabliereIU/cyress/integration/ --dry-run=client -o yaml | kubectl apply -f - -n $NAMESPACE
          kubectl create configmap erabliereiu-cypress-support --from-file=ErabliereIU/cyress/support/ --dry-run=client -o yaml | kubectl apply -f - -n $NAMESPACE
          kubectl create configmap erabliereiu-cypress-plugins --from-file=ErabliereIU/cyress/plugins/ --dry-run=client -o yaml | kubectl apply -f - -n $NAMESPACE


          # create the cypress pod
          kubectl apply -f Infrasutrcture/kuberenetes/staging/cypress-config.yaml -n $NAMESPACE

          # create the cypress pod
          kubectl apply -f Infrasutrcture/kuberenetes/staging/cypress-pod.yaml -n $NAMESPACE

          # attach to the cypress pod
          kubectl attach cypress-pod -c cypress-pod -n $NAMESPACE

      # Logs
      - name: Get logs
        if: always()
        run: |
          # Print the logs of erabliereapi pod
          kubectl logs deployment/erabliereapi-deployment -n $NAMESPACE

      # Deploy to kubernetes
      - name: Kubectl delete namespace
        if: always()
        run: |

          # delete the staging namespace
          kubectl delete namespace $NAMESPACE